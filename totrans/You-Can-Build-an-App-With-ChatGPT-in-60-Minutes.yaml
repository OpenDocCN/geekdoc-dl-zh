- en: <!--yml
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: <!--yml
- en: 'category: COT 专栏'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分类：COT 专栏
- en: 'date: 2024-05-08 11:06:53'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 日期：2024年5月8日11:06:53
- en: -->
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: -->
- en: You Can Build an App With ChatGPT in 60 Minutes
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 ChatGPT 在60分钟内构建应用
- en: 来源：[https://every.to/chain-of-thought/you-can-build-an-app-with-chatgpt-in-60-minutes](https://every.to/chain-of-thought/you-can-build-an-app-with-chatgpt-in-60-minutes)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 来源：[https://every.to/chain-of-thought/you-can-build-an-app-with-chatgpt-in-60-minutes](https://every.to/chain-of-thought/you-can-build-an-app-with-chatgpt-in-60-minutes)
- en: '*TL;DR: Today we’re releasing a new episode of our podcast* How Do You Use
    ChatGPT? *I go in depth with Geoffrey Litt, a researcher at the lab* [*Ink & Switch*](https://www.inkandswitch.com/)*,
    on the future of software and AI. As we talk, we build our own app together in
    60 minutes using ChatGPT and Replit. Watch on* [*X*](https://x.com/danshipper/status/1745088395880050922?s=20)
    *or* [*YouTube*](https://youtu.be/oy7uMpPrGMA)*, or listen on* [*Spotify*](https://open.spotify.com/episode/40j69kgDWY9eXgZD41Afuh?si=JnQMD6WpQeK1FZGvQgjuzw)
    *or* [*Apple Podcasts*](https://podcasts.apple.com/us/podcast/how-do-you-use-chatgpt/id1719789201?i=1000641160825)*.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*TL;DR: 今天我们发布了我们的一个新播客* 你如何使用ChatGPT？ *我和实验室的研究员Geoffrey Litt进行了深入讨论，讨论了软件和人工智能的未来。我们一边聊天一边使用ChatGPT
    和 Replit 在60分钟内构建了我们自己的应用程序。在* [*X*](https://x.com/danshipper/status/1745088395880050922?s=20)
    *上观看，或在* [*YouTube*](https://youtu.be/oy7uMpPrGMA)*上观看，或在* [*Spotify*](https://open.spotify.com/episode/40j69kgDWY9eXgZD41Afuh?si=JnQMD6WpQeK1FZGvQgjuzw)
    *上收听，或在* [*Apple Podcasts*](https://podcasts.apple.com/us/podcast/how-do-you-use-chatgpt/id1719789201?i=1000641160825)
    *上收听。*'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Geoffrey Litt wants you to build software—whoever you are. Not just if you’re
    a seasoned software engineer in San Francisco, but even if you have minimal—or
    zero—coding knowledge.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Geoffrey Litt希望你去构建软件——无论你是谁。不仅是如果你是旧金山的经验丰富的软件工程师，而是即使你的编码知识很少——或者为零。
- en: He’s a researcher who’s working on creating a future where anyone can make changes
    to the software they use—what he calls [malleable software](https://www.geoffreylitt.com/2023/03/25/llm-end-user-programming.html).
    I’ve been writing about similar topics—like how AI might turn [everyone into a
    developer](https://every.to/chain-of-thought/you-re-a-developer-now) and [upend
    SaaS business models](https://every.to/chain-of-thought/what-comes-after-saas)—for
    a while, and it was great to have Geoffrey on the show to discuss our overlapping
    ideas.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 他是一位研究人员，致力于创造一个任何人都可以对他们使用的软件进行更改的未来——他称之为[malleable software](https://www.geoffreylitt.com/2023/03/25/llm-end-user-programming.html)。我一直在写类似的主题，比如人工智能如何可能使[每个人都成为开发者](https://every.to/chain-of-thought/you-re-a-developer-now)，并且[颠覆SaaS商业模式](https://every.to/chain-of-thought/what-comes-after-saas)，我很高兴能邀请Geoffrey来和我一起讨论我们的重叠想法。
- en: 'We talked about how ChatGPT enables anyone to build single-use apps and expands
    the horizon of who gets to build things. We even put our money where our mouth
    is: As we talked, we built an app together in ChatGPT and Replit.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们谈论了ChatGPT如何使任何人都能构建单次使用的应用程序，并扩展了能够构建东西的人的范围。谈论的同时，我们一边谈论一边在ChatGPT和Replit中一起构建了一个应用程序。
- en: It was some of the most fun I’ve ever had recording a podcast episode, and if
    you’re interested at all in the future of software and AI, it’s a must-watch.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我录制播客中最有趣的时刻，如果你对软件和人工智能的未来有兴趣，这是必看的。
- en: Here’s a taste of what we talk about.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们讨论的一些内容。
- en: '**Coding is getting easier—and much faster.** ChatGPT has the potential to
    make coding possible for novice coders and make coding drastically easier—or more
    efficient—for seasoned pros. “A lot of the time it''s actually faster now for
    me to just make the thing that has the tiny features that I need than to go try
    to Google which one is the best and learn how to use it,” Geoffrey says.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码变得更容易——并且更快速。** ChatGPT有潜力使编码对新手编码者变得可能，并且使资深专家的编码工作变得极其容易——或者更有效率。“现在我有时候只需制作我需要的细小功能的东西比去搜索并学习如何使用它更快”，Geoffrey说。'
- en: '**ChatGPT as a muse, not an oracle.** Geoffrey wants people to treat ChatGPT
    like an in-house consultant: “It''s like a designer or or an engineer—the earlier
    you bring them in, the more they can contribute to the ideas and the more context
    they build up.”'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ChatGPT是灵感来源，而非神谕。** Geoffrey希望人们把ChatGPT当作内部顾问：“就像一个设计师或工程师——你越早把他们请进来，他们就越能为创意做出贡献并积累更多上下文信息。”'
- en: '**The benefits of a coding plan.** Big projects necessitate ample planning.
    “If I''m going to spend six months on a huge project, I better have a plan when
    I start,” Geoffrey says. That’s true for ChatGPT, too. Providing a plan helps
    clue the chatbot into your ambitions.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码计划的好处。** 大型项目需要充分的计划。“如果我将花六个月时间进行一个巨大的项目，我最好在开始时就有一个计划”，Geoffrey说。这对于ChatGPT也是适用的。提供一个计划有助于提示聊天机器人您的目标。'
- en: '**Don’t waste time reading the code.** Geoffrey says if you’re working off
    ChatGPT code, just run it and see what happens. Don’t bother poring over the code
    until you know if it works or not. “It''s a waste of time,” he says. “I would
    rather just see what it did and use the thing.”'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要浪费时间阅读代码**。杰弗里说，如果你在使用ChatGPT的代码，只需运行它，看看会发生什么。在确定它是否有效之前，不要费时间细看代码。“这是浪费时间，”他说。“我宁愿只看看它做了什么，并使用它。”'
- en: '**The future is “modding and mixing.”** If software isn’t doing what you need,
    the answer currently is usually to start from scratch. “Often what I actually
    would prefer is to start with an app that someone else made that''s almost right,
    but I just need to make a small tweak,” Geoffrey says. With malleable software,
    he says tinkering could become the new normal.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未来是“改编和混合”。**如果软件不能满足你的需求，当前的答案通常是从头开始。杰弗里说：“我通常更喜欢的是从别人做的几乎合适的应用开始，只需要做一个小调整就可以了。”他说，使用可塑软件，调试可能成为新常态。'
- en: '**“Effortless flow.”** Building an app together was easy and fun. That’s what
    we both want coding experiences to be like. “LLM-based tools are sort of on a
    path to enabling that for way more people in way more situations,” Geoffrey says.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “毫不费力的流畅。”一起构建应用很容易也很有趣。这正是我们想要编程体验的样子。“基于LLM的工具正在为更多的人在更多的情况中实现这一点，”杰弗里说。
- en: 'You can check out the episode on Twitter/X, Spotify, Apple Podcasts, or YouTube.
    Links and timestamps are below:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Twitter/X、Spotify、Apple Podcasts或YouTube上观看这一集。链接和时间戳如下：
- en: '**Timestamps:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间戳:**'
- en: Intro *1:03*
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开场 *1:03*
- en: What is malleable software? *1:36*
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是可塑软件？ *1:36*
- en: Who gets to make software on the web *8:06*
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁有权在网络上制作软件 *8:06*
- en: Deciding what app to build. *14:50*
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 决定要构建什么应用。 *14:50*
- en: Starting on our app. *22:06*
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始我们的应用。 *22:06*
- en: Don’t read the code first. *31:07*
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要先读代码。 *31:07*
- en: Starting from scratch could soon be a thing of the past. *47:55*
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从零开始可能很快就会成为过去的事了。 *47:55*
- en: Getting past those final error messages *55:50 *
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克服这些最终错误消息 *55:50*
- en: Voila! An app. *1:03:31*
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 啊哈！一个应用。 *1:03:31*
- en: Effortless flow. *1:05:50*
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 毫不费力的流畅。 *1:05:50*
- en: What do you use ChatGPT for? Have you found any interesting or surprising use
    cases? We want to hear from you—and we might even interview you. Reply here to
    talk to me!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你用ChatGPT做了什么？你发现了有趣或令人惊讶的用途吗？我们想听听你的想法——甚至可能采访你。在这里回复我！
- en: Miss an episode? Catch up on my recent conversations with Waymark founder [Nathan
    Labenz](https://every.to/chain-of-thought/how-to-use-chatgpt-as-a-copilot-for-learning), 
    Notion engineer [Linus Lee](https://every.to/chain-of-thought/how-an-ai-researcher-uses-chatgpt-and-notion-ai),
    writer [Nat Eliason](https://every.to/chain-of-thought/chatgpt-for-writing-and-recommending-books),
    and Gumroad CEO [Sahil Lavingia](https://every.to/news/introducing-how-i-use-chatgpt)
    and learn how *they* use ChatGPT.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 遗漏了一集？赶紧看看我最近与Waymark创始人[Nathan Labenz](https://every.to/chain-of-thought/how-to-use-chatgpt-as-a-copilot-for-learning)、Notion工程师[Linus
    Lee](https://every.to/chain-of-thought/how-an-ai-researcher-uses-chatgpt-and-notion-ai)、作家[Nat
    Eliason](https://every.to/chain-of-thought/chatgpt-for-writing-and-recommending-books)和Gumroad
    CEO [Sahil Lavingia](https://every.to/news/introducing-how-i-use-chatgpt)的对话，了解他们如何使用ChatGPT。
- en: '**Transcript**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**节录**'
- en: '**Dan Shipper (00:00:01)**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普（00:00:01）**'
- en: Why don’t we build something together?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么不一起构建一些东西？
- en: '**Geoffrey Litt (00:00:02)**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:00:02）**'
- en: Alright. Let’s see how it goes. So I'm going to kick us off with my goal, which
    is, “I'm appearing as a guest on a podcast. I want an app that I can have open
    while I'm on the show to help me keep track of time and remember what I want to
    say.” Okay. So we got this code. I'm not going to read it. I just copy, paste
    and go. I'm just pasting from ChatGPT. This should update live, this little window
    here.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。让我们看看情况如何。所以我要开始我的目标，“我要做客播客节目。我希望有一个应用，当我在节目上时可以打开，帮助我跟踪时间和记住我想说的话。”好吧。我们有这段代码。我不会读它。我只是复制、粘贴并运行。我只是从ChatGPT粘贴过来的。这应该实时更新，这个小窗口。
- en: So it has the time, did the simple dark theme pretty well. I would say it has
    a box for notes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，时间到了，简单的暗色主题做得不错。我会说它有一个笔记的框。
- en: '**Dan Shipper (00:00:33)**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普（00:00:33）**'
- en: This is magic. Like this is crazy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是神奇的。就像是疯了一样。
- en: '[Intro sequence]'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[开场]'
- en: '**Dan Shipper (00:00:47)**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普（00:00:47）**'
- en: Geoffrey, welcome to the show.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 杰弗里，欢迎来到节目。
- en: '**Geoffrey Litt (00:00:48)**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:00:48）**'
- en: Thanks so much. It's good to be back.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。很高兴回来。
- en: '**Dan Shipper (00:00:50)**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普（00:00:50）**'
- en: Yeah. Good to have you. I interviewed you, I think two or three years ago on
    Superorganizers. That interview went really, really well. And, I just think you're
    one of the deepest thinkers about this stuff. And in the pre-production call,
    I was just saying like, I think generative AI just sort of, it just takes the
    things that you've been thinking about to a new level. And I'm just really excited
    to check in with you.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。很高兴见到你。我记得两三年前我在Superorganizers采访过你。那次采访非常顺利。而且我认为你是这方面最深刻的思考者之一。在预制电话中，我只是在说，我认为生成式人工智能只是将你一直在思考的事情提升到了一个新的水平。我很期待与你交流。
- en: '**Geoffrey Litt (00:01:12)**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:01:12）**'
- en: Yes, a lot has changed over the past couple of years.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年发生了很多变化。
- en: '**Dan Shipper (00:01:17)**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:01:17）**'
- en: And for folks that are not familiar with your work, you are a researcher at
    Ink & Switch, which is an independent research lab, and you explore what you call
    malleable software, which are computing environments where anyone can mold their
    own tools to their needs. Can you talk to us about what malleable software is
    and why that's important?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于不熟悉你工作的人来说，你是Ink & Switch的一名研究员，这是一个独立的研究实验室，你探索了你所称之为可塑软件的领域，这些是任何人都可以根据自己的需求塑造自己的工具的计算环境。你能谈谈什么是可塑软件，以及为什么这很重要吗？
- en: '**Geoffrey Litt (00:01:36)**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:01:36）**'
- en: Yeah, absolutely. So this has been a quest that I've been on for at least the
    last five years now. And it all started, I was working at a startup and we were
    making SaaS software for schools. And, I just started getting really bummed that
    we kept saying no to every single request that came our way from some teacher
    in a classroom.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，绝对是。这是我至少过去五年一直在追求的目标。一切始于，我当时在一家初创公司工作，我们正在为学校制作SaaS软件。我开始感到非常沮丧的是，我们每次都对来自教室里的某个老师的请求说不。
- en: And they would say, “ can, can you change this word because it doesn't match
    the way I teach?” Or, “Can you add this little button for me that would do X?”
    And we would say, “No, we,we’re not going to add that button just for you.” And
    that's such a normal way of thinking about software for, for people used to SaaS.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 他们会说，“你能不能更改这个词，因为它不符合我的教学方式？”或者，“你能为我添加这个小按钮吗，它可以做X吗？”我们会说，“不，我们不会为了你而添加那个按钮。”这对于习惯于SaaS的人来说是一种很正常的思维方式。
- en: Bbut it felt really strange to me. And so I started wondering what if we had
    a world where everybody could craft software tools that match the workflows they
    want to have, unique to themselves and not just using these, pre-made tools. That’s
    what malleable software means to me is that we can all have the software that
    works for us, not for some product manager off in San Francisco.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但对我来说感觉真的很奇怪。所以我开始想，如果我们有一个世界，每个人都可以制作符合他们想要的工作流程的软件工具，独一无二地属于自己，而不仅仅是使用这些预先制作的工具。对我来说，这就是可塑软件的意义，我们都可以拥有适合自己的软件，而不是适合旧金山的某个产品经理。
- en: And the really interesting thing that's happened the past couple of years is
    that, until recently programming was a huge bottleneck in this space. You need
    to do a lot of programming to make any sort of software. And the big question
    was how can we sort of route around programming to give people tools to make software
    without doing that?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 过去几年发生的真正有趣的事情是，直到最近，编程一直是这个领域的一个巨大瓶颈。你需要进行大量编程才能制作任何类型的软件。而一个重要问题是，我们如何绕过编程，给人们提供制作软件的工具而不必进行编程？
- en: And what really excites me about generative AI is that, oh my gosh, we now have
    a thing that can kind of, sometimes turn fuzzy ideas into code. And so that's
    starting to cut almost like a shortcut through that impassable mountain. And I
    think it's a really exciting time to be exploring how can we apply that base technology
    to help everybody make and edit the software that they want to have.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我真正兴奋的是生成式人工智能，哦天哪，我们现在有一种东西，有时可以将模糊的想法转化为代码。因此，这开始几乎像是一条通过那不可逾越的山的捷径。我认为现在是一个非常激动人心的时刻，我们正在探索如何将这项基础技术应用到帮助每个人制作和编辑他们想要拥有的软件上。
- en: '**Dan Shipper (00:03:15)**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:03:15）**'
- en: Right. I love that. It's an idea I've been thinking about as well. You're obviously
    far deeper than I am, but I wrote this article called “[What comes after SaaS?](https://every.to/chain-of-thought/what-comes-after-saas)”
    I don't know, probably six months ago. And, the short answer is bespoke apps customized
    by AI. And, I think for people who are sort of newer to this one, one way to think
    about it, and I'm curious what you think of this metaphor is like the difference
    between right now, a lot of the software that you use, it's sort of like…when
    you use Spotify or Gmail or whatever, it's sort of like staying at a hotel where
    veryone gets the same hotel room. Andthe company is running the hotel and when
    you sign up for Gmail or whatever, you get your little Gmail hotel room and it's
    got all the same things as everybody else.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对，我喜欢这个。这也是我一直在思考的一个想法。显然，你显然比我更深刻，但我大约六个月前写了这篇文章叫做“[SaaS之后会出现什么？](https://every.to/chain-of-thought/what-comes-after-saas)”
    答案很简单，就是由人工智能定制的定制应用程序。我认为对于那些稍微新手的人来说，一个比喻是这样的，我很好奇你对此有什么看法：现在，你使用的很多软件，有点像...当你使用Spotify或Gmail时，就好像住在每个人都有相同酒店房间的酒店里。公司经营着这个酒店，当你注册Gmail或任何其他东西时，你得到自己的小Gmail酒店房间，它和其他所有人的一样。
- en: And there's like some ways that you can customize it. Like obviously you put
    your luggage in the hotel room, like, so there's certain things that are yours.
    But. Everything is basically the same, the same basic model, and over time, companies
    get, especially SaaS companies get good at adding little customizations or whatever,
    but it's always on their terms.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些你可以自定义的方式。显然，你可以把行李放在酒店房间里，所以有某些东西是属于你的。但。一切基本上都是一样的，同样的基本模式，随着时间的推移，公司变得比较好，尤其是SaaS公司擅长于添加一些微小的定制或其他东西，但这都是按照他们的条款。
- en: It's always on their guardrails. And I think your vision of software is a little
    bit less like these infinitely large hotel rooms that people are staying in and
    more like everyone owning their own home or something like that. And, either having
    power tools and the ability to use them, or maybe having their own general contractor
    on staff that they can, they can deploy to make any change they want.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 它总是按照他们的铁轨。我认为你对软件的设想有点不太像人们一直待在无限大的酒店房间里，更像每个人拥有自己的家之类的。而且，他们要么有电动工具和使用它们的能力，要么可能在员工中有自己的总包工程师，可以部署以进行任何他们想要的变更。
- en: '**Geoffrey Litt (00:04:47)**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:04:47)**'
- en: Yeah. I love that analogy. I think it's a really good one too, because it's
    subtle in that sometimes hotels are fine. And there's a whole spectrum from renting
    a hotel room to renting an apartment to buying a house that someone else built.
    There are people also who build their own home from scratch and design it all
    right. And there's a whole spectrum there and it's okay to, I think at different
    times be on different points. What I think is really pernicious about the hotel
    idea though is like, imagine we all lived in hotel rooms all the time. you would
    probably stop thinking about questions like, “Oh, what would be a better layout?”
    When I walk into a hotel room, I don't start thinking about moving the walls around
    or changing the decorations because it's not a thing that I obviously am allowed
    to do. And so, those questions don't occur to me. And that's what I worry about
    with software, the worst case outcome is that we all use SaaS tools that subtly
    affect the way we think. And we don't even realize it because we're just so used
    to living in those tools.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我喜欢这个比喻。我认为这个比喻也非常好，因为有时候酒店是可以的。从租酒店房间到租公寓再到购买他人建造的房子，有一个完整的谱系。也有些人自己从零开始建造自己的家并设计家居。这里有一个完整的范围，我认为在不同的时间点上处于不同位置是可以的。但我认为关于酒店概念真正有害的是，就好像想象我们一直住在酒店房间里一样。你可能会停止思考“哦，有一个更好的布局会是什么样？”当我走进酒店房间时，我并不会开始考虑移动墙壁或改变装饰，因为这显然不是我可以做的事情。所以，我不会产生这些想法。这就是我对软件感到担忧的地方，最坏的情况就是我们都使用那些潜移默化地影响我们思维方式的SaaS工具。但我们甚至没有意识到这一点，因为我们习惯了生活在这些工具中。
- en: '**Dan Shipper (00:05:43)**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:05:43)**'
- en: Yeah. I was just talking to a couple of weeks ago—I was talking to Linus Lee
    on this show, and he was talking about something similar, which is, the idea of
    agency and how our tools shape the agency that we have, and, and thinking about
    ways to give users more agency in the context of general AI, where I think, in
    large part for now, there's maybe a little bit less agency in something like using
    Midjourney than you might get in something like using Photoshop because you can
    like literally, with Midjourney, you can prompt it, but in Photoshop, you can
    literally change the pixels and, so figuring out ways to give people finer-grained
    control, it's a really interesting challenge in generative AI.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。几周前我刚和林纳斯·李在这个节目上聊过，他也谈到了类似的事情，即代理性的概念以及我们的工具如何塑造我们拥有的代理性，思考如何在普通人工智能的背景下给用户更多的代理权。目前，在某种程度上，像使用
    Midjourney 这样的工具，与使用 Photoshop 相比，可能在一定程度上缺乏代理性，因为你可以直接在 Photoshop 中更改像素，而在 Midjourney
    中，你只能提示它。因此，找到给人们更精细控制权的方法是普通人工智能中一个非常有趣的挑战。
- en: '**Geoffrey Litt (00:06:26)**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:06:26）**'
- en: Yeah, absolutely, and I think one really important point here is that there's
    a lot of different dimensions of how people gain agency.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，绝对是的，我认为这里有一个非常重要的观点，即人们获得代理权的方式有很多不同的维度。
- en: And some of them are things surrounding the AI and are not core to the AI itself.
    So one, one, example following on with the hotel analogy, right. As you said,maybe
    everybody has a general contracting team that they can bring to their hotel room.
    If you show up at a hotel with a construction crew, they're not going to let you
    tear down your room and rebuild it. There's like a sort of social agreement or
    legal framework or whatever around, your contract with that entity, where it's
    not really like your ability to move walls physically, that is the constraint.
    And so, to bring that back to software, what I think about a lot is, if I had
    a personal team of 100 developers that were working for me, what could I do with
    that power and, let's say I'm using Spotify and I'm like, “Oh, I hate the way
    that Spotify shows me these playlists. I wish that it showed me that in a different
    way.” I can’t edit the Spotify app. I don't have control over that and so, what
    I'm thinking about a lot these days is how can we reorient the way software is
    distributed and constructed so that my, so to speak, personal dev team can actually
    do useful stuff for me.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些与人工智能相关的事情并不是人工智能的核心内容。所以，举个例子，继续用酒店的类比，你说过，也许每个人都有一个可以带到酒店房间的建筑队伍。如果你带着一个建筑队来到酒店，他们不会让你拆掉房间重新建造。这是一种社会协议或法律框架，规定了你与那个实体的合同，在这里，真正的约束不是你在物理上移动墙壁的能力。因此，将这一点回到软件上，我经常考虑的是，如果我有一支100人的个人开发团队，我可以用这种力量做些什么，比如，我在使用
    Spotify，我想，“哦，我讨厌 Spotify 显示给我的这些播放列表的方式。我希望以不同的方式显示。”我不能编辑 Spotify 应用程序。我对此没有控制权，所以，我现在经常思考的是，我们如何重新定位软件的分发和构建方式，以便我的个人开发团队实际上可以为我做一些有用的事情。
- en: And, for example, maybe they could make browser extensions for me, or maybe
    they could, if my software is open source and I control it, maybe they could start
    adding features for me. How can we change the foundations of software in a way
    that is best positioned to take advantage of the fact that everybody is going
    to have this power available to them in the coming years?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，例如，也许他们可以为我制作浏览器扩展程序，或者如果我的软件是开源的，我控制着它，也许他们可以开始为我添加功能。我们如何改变软件的基础，以最好地利用每个人在未来几年都将拥有这种力量的事实？
- en: '**Dan Shipper (00:08:06)**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:08:06）**'
- en: Yeah. No, that makes total sense. And it's just making me think of … I teach
    this course called “How to build an AI chatbot” and one of the really incredible
    things about this course is we take people from not really being able to code
    to shipping an app in 30 days. And, it's really cool because I feel like there
    are all these people out there who are just waking up to the idea that they have
    these magical powers where they can literally now build stuff in a way that they
    couldn't before.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。不，这完全合理。这让我想起了……我教一个名为“如何构建AI聊天机器人”的课程，其中一个非常令人惊奇的事情是，我们带领人们从几乎不会编码到在30天内发布应用程序。这真的很酷，因为我觉得有很多人现在才开始意识到他们拥有这种神奇的力量，可以在以前无法做到的方式上构建东西。
- en: And a lot of these people are like, okay, it's a product manager who you work
    with engineers and you've maybe you took one coding class in college, but you've
    never felt confident enough to actually go build and ship a React app or whatever.
    And what all they really need is like a little push to be like, okay, just use
    ChatGPT, ask it what to do. Here's some sample code and like go. And it really
    changes things for people where on day one, they can have a working chatbot with
    a couple prompts and that's like a big, “holy shit, I cannot believe that I can
    actually make something.” And then what it does is it motivates them to try to
    learn the underlying fundamentals in this way that's like very connected to practice,
    as opposed to the way that you used to have to learn programming, which is like,
    you spend six months like learning about loops and if statements and like all
    this stuff, and you're like, “I have no idea how this connects to like the things
    I want to make.”
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人都有这种感觉，他们可能是产品经理，你和工程师们一起工作，也许在大学里上过一门编程课，但你从未有过足够自信去构建和发布一个 React 应用程序或任何其他东西。他们真正需要的只是一点推动，让他们明白，好吧，只需使用
    ChatGPT，询问它该怎么做。这里有一些示范代码，然后就可以开始。这实际上会改变人的一切，因为他们第一天就可以拥有一个工作的聊天机器人，它可以提供一些提示，这就像一个很大的“天啊，我简直不敢相信我居然做出了这样的东西。”然后，它激励他们去尝试学习基础知识，这种学习方式非常注重实践，而不是过去学习编程的方式，那样你会花六个月的时间学习循环和条件语句等等，然后你会说，“我不知道这和我想做的东西有什么关系。”
- en: And so I just think that there's this really, quickly expanding horizon of who
    gets to make things in the world and there are a lot of people who are within
    the horizon of being able to make stuff that don't know it yet, but all they literally
    have to do is sit down with ChatGPT. And that horizon is going to be significantly
    larger in five years. And I think that's one of the things that you're working
    on. And I think it's so exciting.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我只是认为在这个世界上，有更多人将有机会去创造东西，这个机会正在迅速扩大，有很多人可以做出东西，但他们自己还没有意识到，但他们所需要做的就是坐下来跟
    ChatGPT 交流。而且在五年后，这个机会将会显著增大。我认为这就是你们正在努力的事情之一。我认为这是非常激动人心的。
- en: '**Geoffrey Litt (00:10:05)**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:10:05)**'
- en: I love that way of thinking about it. For me, the way that I learn best has
    always been to make first and then figure out what I'm doing second. And I think
    people often end up in these dumb debates that are like, “people should be able
    to make stuff without learning the fundamentals.” And then other people are like,
    “it's really important to learn the fundamentals.” And my take is yes, it's important
    if you want to go really far at some point, you're going to have to dig deep and
    actually learn what you're doing. And that's going to propel you. But, that shouldn't
    be a barrier to you doing anything. And so in my career, I got started in web
    development, just throwing together Rails apps. And I didn't really know how to
    program. I didn't know Ruby. I was just sort of copy-pasting and messing around
    and I fought through the pain just cause I wanted to make and share stuff. And
    I think you're, you're exactly right that the flip that I see when people start
    using ChatGPT is all of these frustrating moments that before took incredible
    dedication to fight through because they were so frustrating and programming is
    full of these absolutely full of these things—you're missing a semicolon and it
    takes you three hours to realize that that's why your thing wasn't working. That's
    so demoralizing and People who don't have access to a friend or tutor who can
    help with them with that. There's just a huge drop-off chance, I think, at that
    point. And when I'm using ChatGPT, even now, I'm a skilled programmer, but I'm
    often working in areas that I don't know as well. Having ChatGPT with me just
    feels like the default flips to, I have flow, I have momentum, and I have this,
    this sort of support that's going to make sure everything goes okay. And I'm just
    less worried about getting stuck. And I think that that feeling is really qualitatively
    different. And I agree when people realize that it's a really exciting flip for
    them.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:11:47)**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Yeah, it really is. So I think that that sort of brings us to,the, the main
    thing that we wanted to do today, which is… In most of these episodes, what we're
    doing is we're going through historical chats and then, and then we both kind
    of interact with ChatGPT and we explore something and find things that we never
    would have found before.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: And what you suggested, which I think is brilliant, is why don't we just build
    something together? Why don't we build an app? And I think in the process of building
    an app, people will be able to get just a little bit of an idea of what you mean
    by malleable software, what this future of being able to modify things is going
    to look like.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: And then two is they're going to be able to see what are the specific ways that
    you're using ChatGPT to achieve these results, in just a very, very detailed way.
    And we'll try to make it so that if you're a programmer, you can get a lot out
    of it. And if you're not a programmer, you'll be able to understand what's going
    on and you'll be able to see it, get a little bit of a taste of what would it
    be like to push myself in this way a little bit and try to build stuff. And I
    think it'll be really cool.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后第二个是，他们将能够看到您使用 ChatGPT 实现这些结果的具体方式，以非常非常详细的方式。我们将努力使之成为程序员的福音。如果你不是程序员，你也能理解发生了什么，并且你能够看到它，对我来说，尝试以这种方式推动自己并尝试构建东西会是一种什么样的感觉，我认为这将会很酷。
- en: '**Geoffrey Litt (00:12:47)**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:12:47）**'
- en: Yeah, I'm excited to try it out. And maybe just as a preamble, I can talk a
    bit about how I think about this task that we're going to do. Right? So,what I've
    been trying to do in my work is, sometimes there'll be a brief moment when I'm
    in the middle of something and I have this thought that's like, “Oh, I wish I
    just had a software tool that did X.” And, again, this is getting out of the hotel
    mindset. And I've been trying to notice those moments and, and think, “Wait, like,
    could I actually make that?” And, before maybe that would have taken a day. So
    the answer is like, “No, not worth it.” But now if the answer is like “Five minutes,”
    maybe, right?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我很兴奋来试一下。也许作为序言，我可以谈谈我如何看待我们要做的这项任务。对吧？所以，在我的工作中，我一直在尝试做的事情是，有时候会有一个短暂的时刻，当我正在做某事的时候，我有一个想法，就是“哦，我希望我只是有一个软件工具，能做到
    X。”，再次，这是走出酒店思维。我一直在试图注意到这些时刻，并且思考，“等等，我真的可以做到吗？”以前也许需要一天。所以答案是“不值得”。但现在如果答案是“五分钟”，也许，对吧？
- en: And so I've been trying to notice those moments and, I've come up with a workflow
    that's very, very simple and crude, but has worked for me a few times for making
    these sort of quick apps that help me with stuff. One small example of one that
    I built before, is I was prepping for a trip to Japan and I actually grew up in
    Japan and I speak somewhat fluent Japanese. But I have some sort of pockets of
    missing skill, particularly in more formal communication. And I was on these text
    message threads with some of my mom's acquaintances who I don't know as well.
    I mean, I needed to sort of text them in a way that was correct to the context,
    and I was just struggling.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我一直在试图注意到这些时刻，我想出了一个工作流程，非常非常简单和粗糙，但对我来说已经几次起到了作用，可以帮我快速制作这些有用的应用程序。我之前构建的一个小例子是，我正准备去日本旅行，我实际上在日本长大，并且我说得算是流利的日语。但是我在某些方面存在一些缺失的技能，特别是在更正式的交流中。我在和我妈妈的一些熟人之间的短信线程中，有一些我不太熟悉的人。我是说，我需要以正确的方式给他们发短信，以符合上下文的要求，但我却感到困惑。
- en: And I was doing all these ChatGPT chats to try to help me with the translation.
    And it was really helpful, but I kept hitting these really annoying Chatsituations
    where I would be like, “That sounds too formal. Make it sound a little more casual.”
    “Oh, like that sounds too casual. Make it sound a little more formal.” And so
    what I did in the end is I made this, this UI tool that, you can do a translation
    and then there's a little slider to adjust how formal the translation should be.
    And that was just way more, way easier, way more fun. And it sort of encapsulated
    a lot of the wisdom of the system prompt I had been iterating on in a nice GUI
    tool that I could then just whip open whenever I wanted.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '我一直在进行所有这些 ChatGPT 的聊天，试图帮助我进行翻译。这确实很有帮助，但我一直遇到这些非常令人讨厌的聊天情况，我会说，“听起来太正式了。让它听起来更随意一点。”“哦，那听起来太随意了。让它听起来再正式一点。”所以最后我做的是我制作了这个
    UI 工具，你可以做一次翻译，然后有一个小滑块来调整翻译的正式程度。这样做就更轻松，更有趣。它将我之前一直在不断迭代的系统提示的很多智慧封装到了一个漂亮的
    GUI 工具中，我随时都可以打开。 '
- en: And so that's sort of what I mean when I talk about these little helpful software
    tools that I wish existed just for me. Right. And so that's I think the kind of
    thing that would be fun to try to, to build together.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是我说的这些小有用的软件工具，我希望它们只是为了我存在。对吧。所以我认为这是一种很有趣的尝试，尝试一起构建这样的东西。
- en: '**Dan Shipper (00:14:50)**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希波（00:14:50）**'
- en: Okay, cool. Well, let's find it. Let's find a tool to make, I know you have
    some ideas. I've got some ideas. Why don't you start and we'll just kind of go
    back and forth until we find something we like.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，很酷。嗯，让我们找找看。让我们找一个工具来实现，我知道你有一些想法。我也有一些想法。你先开始，然后我们就轮流讨论，直到找到我们喜欢的东西。
- en: '**Geoffrey Litt (00:14:59)**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:14:59）**'
- en: Yeah. So, one idea I had was I'm a guest on your podcast right now. And so what's
    like a utility that I would want to have while I'm a guest on your podcast, and
    I could imagine, maybe there's like a time bar that kind of shows me like, how
    are we doing on time? And so I have an ambient awareness of pacing sort of like,
    you can imagine it's like keynote presenter mode, but specialized to being a guest
    on your show. Maybe there's a checklist of like topics we want to, I want to make
    sure I hit with you and I can check them off. So I have this aid. I don't know
    if there's stuff, maybe as a host, do you have ideas for what you might want?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。所以，我有一个想法，我现在是你播客的一个客人。那么，在我做你节目的客人时，有什么实用工具我会想要的呢？我可以想象，也许有一个时间条，可以告诉我我们的时间如何？这样我就可以对节奏有一种环境感知，就像是幻灯片演示者模式，但专门用于成为你节目中的客人。也许有一个主题列表，我想确保与你讨论的主题，并且我可以勾选它们。所以我有这个辅助。我不知道你是否有什么想法，作为一个主持人，你可能会想要什么？
- en: '**Dan Shipper (00:15:36)**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希普尔（00:15:36）**'
- en: Yeah, let's ideate a little bit because I think you're, you're onto something,
    this podcast is sort of unique in that ChatGPT is its own, like it's a, it's a
    guest and insert in certain ways or it's a part of it. And I really love to bring
    it in even more where like, for example, one thing that I think would be really
    useful, I often find myself wishing that we had a live transcription that could
    then get easily fed into ChatGPT and have ChatGPT respond to what's being said,
    and, I don't know if you feel equipped to do that or if that would take too long,
    but something like that would be really helpful, because I'm often sort of, as
    we're talking, I'm often writing stuff into ChatGPT and then being like, “This
    is what they said, like, what do you think?” basically. And if there was an easier
    way to do that, that would be really helpful. I think one of the constraints is.
    It would work if it was its own interface. It would be even better if it was inside
    of ChatGPT somehow. That's probably going to be really hard to do, but just sort
    of thinking, maybe the minimal thing is like real-time transcription. That's really
    easy to either get into ChatGPT or to just have GPT give some sample questions
    or some thoughts like in real time as things are happening that could help push
    us in new and interesting directions.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，让我们畅想一下，因为我觉得你的想法很有道理，这个播客在某种程度上是独特的，因为 ChatGPT 是它自己，就像是一个客人，或者是其中的一部分。我真的很希望能更多地把它融入进来，比如，有一件事情我觉得会非常有用，我经常发现自己希望我们有一个实时转录，然后可以轻松地输入到
    ChatGPT 中，并让 ChatGPT 回应所说的话，我不知道你是否感觉有能力做到这一点，或者是否会花太长时间，但类似这样的事情会非常有帮助，因为通常在我们谈话的过程中，我经常会把一些东西写入到
    ChatGPT 中，然后说：“这是他们说的，你觉得怎么样？”基本上是这样。如果有一种更容易的方式做到这一点，那将会非常有帮助。我认为其中一个限制是。如果它是自己的界面，那么它就会起作用。如果它能够在
    ChatGPT 内部，那就更好了。这可能会很难做到，但是仅仅思考一下，也许最小的事情就是实时转录。这在 ChatGPT 中要么非常容易实现，要么只是让 GPT
    实时给出一些示例问题或一些想法，就像是实时发生的事情，可以帮助我们朝着新的有趣的方向发展。
- en: '**Geoffrey Litt (00:17:09)**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:17:09）**'
- en: 'Okay. So two thoughts, first of all, at a meta level, we should get ChatGPT
    in on this brainstorming session in a second, because one really important thing
    is that the moment for Chat to get involved is not like when the idea is fully
    formed. This is a huge part of my philosophy on this stuff is that ChatGPT is
    a muse, not an oracle. So it''s not like we will craft the perfect app pitch and
    then bring it to ChatGPT. And then in one shot, it will generate the perfect app
    and then we''re done. It''s like a designer or or an engineer: the earlier you
    bring them in, the more they can contribute to the ideas and the more context
    they build up.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以我有两个想法，首先，在元层面上，我们应该在一会儿的头脑风暴中让 ChatGPT 参与进来，因为一个非常重要的事情是 Chat 参与的时机不是在想法完全形成的时候。这是我对这些事情的哲学的一个很重要的部分，即
    ChatGPT 是一个灵感，而不是一个神谕。所以并不是我们会打造完美的应用程序提案，然后把它带给 ChatGPT。然后在一次尝试中，它就会生成完美的应用程序，然后我们就完成了。就像是一个设计师或工程师：你越早把他们引进来，他们就能越多地为想法做出贡献，并积累更多的上下文。
- en: And so, we should do that. Second brief thought is, this is actually getting
    to one of the hardest parts of this process that I think least-well served by
    ChatGPT currently, which is you asked me, “Could we like do this? How hard would
    it be?” And, I'm a programmer. And so I have a lot of context in my head for helping
    to assess very quickly, like on a scale of 1-to-10, how feasible is what you're
    thinking of and, I think one of the biggest challenges that Chat isn't as good
    at yet is helping people who aren't programmers figure out how hard is this going
    to be? Is it even possible? And so when I build these apps for myself, currently
    there's a lot of that background knowledge I have feeding into the process and
    helping it along. And so one thing I'm excited to explore in the future is, can
    we make these tools better at basically telling you, “Actually, Dan, that's not
    a good idea. I get it. It would be cool, but it's just going to be too much work.
    How about, let's try this other thing instead. That's what senior engineers do,
    right? So, That's the process going on right now in my head.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们应该这样做。第二个简短的思考是，这实际上涉及到了这个过程中我认为ChatGPT目前服务最差的最困难的部分之一，那就是你问我，“我们能做到这一点吗？有多难？”我是一个程序员。所以我头脑中有很多背景知识，可以帮助我快速评估，比如在1到10的尺度上，你所想的东西有多可行，我认为Chat目前最大的挑战之一是它还不太擅长帮助那些不是程序员的人们弄清楚这将有多困难？这甚至可能吗？所以当我为自己构建这些应用程序时，目前有很多我拥有的背景知识渗入了这个过程，并帮助它顺利进行。所以我期待未来探索的一件事是，我们能否使这些工具更好地告诉你，“实际上，丹，这不是一个好主意。我明白。这会很酷，但这只会是太多的工作。我们试试其他的东西吧。这就是高级工程师做的事情，对吧？所以，这就是我脑海中正在进行的过程。
- en: '**Dan Shipper (00:18:53)**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:18:53）**'
- en: I think you're totally right. And it's something that I see in my course as
    well. People just go into these… people get grand visions, they have these big
    ideas, right? And that's what motivates people to build stuff. And I'm constantly
    sort of like being, “Okay, your practice is to figure out what is the core smallest
    thing you can do and just do that. And, and use that as a stepping stone to build
    the more complicated thing later.” But the big failure mode for people is they
    try to do something way too big at the beginning. And then, and then they're like,
    “Well, this isn't going to work” or whatever. And they just get lost in this rabbit
    hole and finding, finding that little small thing that's useful to start, even
    if it's not your big vision is like the best way to build stuff.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为你是完全正确的。而且这也是我在我的课程中看到的情况。人们只是进入这些……人们有宏伟的愿景，他们有这些大的想法，对吧？这就是激励人们去建造东西的动力所在。我不断地在说，“好吧，你的实践是找出你能做的最核心最小的事情，然后只做那个。并且，将其用作以后构建更复杂事物的垫脚石。”但是人们的一个重大失败模式是他们试图一开始就做一些太大的事情。然后，然后他们就会说，“嗯，这行不通”，或者其他什么。然后他们就会迷失在这个兔子洞中，找到，找到那个小小的有用的东西来开始，即使它不是你的大愿景，也是构建东西的最佳方式。
- en: '**Geoffrey Litt (00:19:33)**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:19:33）**'
- en: And it's classic lean startup sort of iterative agile thinking. And the really
    cool thing is Chat can lower those iteration cycles so much. So, I was prototyping
    a game at a hackathon earlier this year and I was just trying to have fun at this
    hackathon. I wasn't trying to work hard and I wanted to prototype different ways
    the game could feel. And so I would just say to Chat, what if it, “What if the
    car moved this way?” And then I'll go off and talk to people, and come back five
    minutes later. I have a new game. I play it. And I'm like, “Oh that, that sucks.
    Let's do this other way.” And so I think, it's doubly important when using ChatGPT
    to realize the superpower you have now is that iterations are fast. It's not that
    Chat always has the right answer. It's that getting a new alternative is much
    faster. And so your goal as a person driving it is to take advantage of that,
    iterate really quickly and try a bunch of stuff really fast and then respond to
    it yourself and sort of see where it goes. So I think we should try that. One
    thing we could try is just starting with a very minimally scoped app that has
    like a clock on it or something. And then we'll see that working and sort of like,
    we'll have more ideas riffing on that and sort of we'll just go from there or
    something.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是经典的精益创业式的迭代敏捷思维。非常酷的是，Chat 可以大大降低这些迭代周期。所以，我之前在一个黑客马拉松上做游戏原型，我只是想在这个黑客马拉松上玩得开心。我不想努力工作，我想尝试不同的游戏感觉原型。所以我就对
    Chat 说，如果车这样移动会怎样？”然后我会和别人聊一会儿，五分钟后回来。我有了一个新游戏。我玩了一下。我发现，“哦，那个，那个糟糕。我们换个方法吧。”所以我认为，使用
    ChatGPT 时双重重要的是意识到你现在拥有的超能力是迭代速度很快。并不是 Chat 总是有正确的答案。而是获得一个新的替代方案速度更快。所以你作为驱动它的人的目标是充分利用这一点，快速迭代，尝试大量的东西，然后自己回应，并看看结果如何。所以我认为我们应该尝试一下。我们可以尝试的一件事情是从一个非常简化的应用开始，比如一个上面有一个时钟的应用。然后我们会看到它运作，并且，我们会有更多的想法在上面进行修改，并且，我们会继续进行下去或者其他事情。
- en: '**Dan Shipper (00:20:48)**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀 (00:20:48)**'
- en: Let's do it. I love it. Okay, let's do it. So here we are. We're in Chat. And
    we're going to get started coding this little app. And I want to point out, I
    got super excited about this whole real time transcription thing and I think you're
    kind of like, “That's probably a little too big to do live in—I don't know—we
    have like 30 or 40 minutes.” So I think that's just, that's just such a really
    important thing to note is that this happens all the time in programming. It's
    a normal thing to be like, I've got this amazing thing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做吧。我喜欢这个。好的，我们来做吧。所以我们在这里。我们在聊天中，我们将开始编写这个小应用程序。我想指出的是，我对这个实时转录的整个事情非常兴奋，而你可能有点像，“这可能有点太大了，我们无法在——我不知道——我们只有
    30 或 40 分钟。”所以我认为这只是，这只是一个非常重要的事情要注意的是，这在编程中经常发生。像，我有这么一个了不起的东西。
- en: And then to be like, “No, no, we got it. We got to pare it back to like something
    that's useful that we can do in the time we have. And then we can add more later.”
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，像，“不，不，我们得把它削减到我们能在有限的时间内完成的有用的东西，然后我们可以以后再添加更多。”
- en: '**Geoffrey Litt (00:21:28)**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特 (00:21:28)**'
- en: Yes. And so I think we should start with a super small thing and expand out
    from there. And that's something that, by the way … What I'm always thinking about
    with my system prompts for Chat and tools around this stuff long term is people
    don't just need help programming. They need help with product management and scoping
    and coming up with the right ideas to solve the problem and design. And ChatGPT
    can help with all that stuff too. And that's really important to remember.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。所以我认为我们应该从一个超级小的东西开始，然后从那里扩展出去。顺便说一句……我一直在思考我的系统提示对于聊天和周围工具的长期作用，人们不仅需要编程帮助，还需要产品管理、范围界定以及提出解决问题和设计正确想法的帮助。ChatGPT
    也可以帮助解决所有这些问题。记住这一点非常重要。
- en: '**Dan Shipper (00:21:56)**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀 (00:21:56)**'
- en: So lead us off. So how are we going to get started? What are we trying to build?
    Or maybe like, maybe the first step is trying to figure out what we're building
    with ChatGPT. Tell us how to get started.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所以带头吧。我们该如何开始？我们要建立什么？或者也许，第一步是试图弄清楚我们用 ChatGPT 要建立什么。告诉我们如何开始。
- en: '**Geoffrey Litt (00:22:06)**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特 (00:22:06)**'
- en: Okay, so we're just going to use this custom GPT. I actually just threw this
    together and put in a system prompt that I like. Maybe I'll show that before we
    get started using it. So you get a bit of behind the scenes. So here's what this
    bot basically does. It's a helpful AI coding assistant. Make sure to follow the
    user's instructions precisely because coding is a domain where sort of details
    matter. And I give it essentially a very specific opinionated stack for the code
    it's going to output.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们只需使用这个定制的 GPT。我实际上只是匆匆忙忙地把它拼凑在一起，放入了一个我喜欢的系统提示。也许在我们开始使用它之前我会展示一下。所以你可以看到一些幕后情况。这个机器人基本上是干什么的呢。它是一个有用的
    AI 编码助手。确保精确遵循用户的指示，因为编码是一个细节很重要的领域。我给它的是一个非常具体的、有主见的代码堆栈，它要输出的代码。
- en: React, TypeScript, Tailwind. This is a very popular set of technologies. It's
    one that I have a pre existing template for in Replit, which is this online coding
    platform. And I tell it, generate all the code in a single file. So basically,
    it's going to give us some code. And as we'll see, we'll just be able to copy-paste
    it into Replit and see what it does. So this is really important to constrain
    what it's doing in a particular technical way to get an output that we can work
    with easily. I'll note by the way, copy-pasting code from ChatGPT to other IDEs
    is not the best workflow in the world. It's obviously not how these tools should
    work in the future. Just a duct taped-together way that you can do it right now
    that I like to use for quick experimentation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'React、TypeScript、Tailwind。这是一套非常流行的技术组合。这是我在 Replit 中已经有一个预先存在的模板的一个。Replit
    是一个在线编码平台。我告诉它，生成所有的代码都在一个单独的文件中。所以基本上，它会给我们一些代码。正如我们将看到的，我们只需将其复制粘贴到 Replit 中，看看它的效果。所以这非常重要，要以特定的技术方式约束它所做的事情，以便获得一个我们可以轻松处理的输出。顺便说一句，将代码从
    ChatGPT 复制粘贴到其他 IDE 中并不是世界上最好的工作流程。显然，这不是这些工具未来应该工作的方式。只是我喜欢用于快速实验的一种粗糙的方式。 '
- en: 'Now let''s talk a bit about the workflow. So, I think this might be the most
    important part of the prompt, so you get an initial idea from the user question
    two is, or part two is absolutely critical. Ask the user for clarification on
    parts of their idea that are underspecified. So we''ll see this play out in a
    second: We''re going to ask it to make an app and our idea is going to be vague.
    And what we don''t want is for Chat to just run ahead and make up a bunch of stuff
    and guess what we mean.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们稍微谈谈工作流程。所以，我认为这可能是提示中最重要的部分，所以你可以从用户问题二或第二部分中获得一个初步的想法，这绝对是至关重要的。请用户澄清其想法中未明确说明的部分。所以我们将在一秒钟内看到这一点：我们将要求它制作一个应用程序，而我们的想法将是模糊的。我们不希望Chat只是跑在前面，编造一堆东西，猜测我们的意思。
- en: We want to be in a conversation where it's going to ask us for help and clarification,
    and we're going to clarify what we mean together. Then once ambiguities are resolved,
    we're going to proceed, we'll make a plan for how the code is going to work first.
    That helps to generate correct code, and then it's going to write the code. Okay,
    so that's the basis.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在一个对话中，它会向我们寻求帮助和澄清，我们会共同澄清我们的意思。然后一旦模棱两可的地方解决了，我们就会继续，我们会先制定代码的工作计划。这有助于生成正确的代码，然后它将编写代码。好的，这就是基础。
- en: '**Dan Shipper (00:24:16)**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:24:16）**'
- en: That's really good. So I'm curious, how well in your experience is this? How
    good is this at following this workflow once you have it in your custom instructions
    for this GPT?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 那真的很好。所以我很好奇，根据你的经验，这个工作流程的遵循程度如何？一旦你为这个 GPT 的自定义指令设定好了，它在遵循这个工作流程方面有多好？
- en: '**Geoffrey Litt (00:24:28)**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:24:28）**'
- en: I've done a bunch of iterations on this prompt over time. My experience has
    been that asking clarifying questions—it's really good at that. I'm always amazed
    at how helpful its clarifying questions are. The hardest task that it's not so
    good at is knowing when to ask you to clarify something or whether to just fill
    it in itself. I try to resolve that by saying if there's some minor ambiguities,
    just make assumptions about what the user means and tell the user how you're filling
    them in. But sometimes it'll just barge ahead too quickly and other times it'll
    be too conservative and asking for too much input from me. It's like if you're
    an employee and you have a. a manager and you're trying to figure out what are
    the things I need to ask them about versus I can just go do myself. It's that
    dynamic, right?
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个提示上做了很多次迭代。我的经验是询问澄清问题—这对于那是非常有用的。我总是对它的澄清问题有多么有帮助感到惊讶。它不擅长的最困难的任务是知道何时要求您澄清某些内容或者是否仅自行填写。我试图通过说如果有一些小的歧义，就做出假设并告诉用户你如何填写它们来解决这个问题。但有时它会过于迅速地前进，而其他时候则会过于保守，并要求我提供太多的输入。这就像你是一个员工，你有一个。一个经理，你正在努力弄清楚我需要问他们什么以及我可以自己做什么。就是这样的动态，对吧？
- en: '**Dan Shipper (00:25:17)**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:25:17)**'
- en: That makes sense. I'm super curious to see how this goes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 那有道理。我非常好奇这会怎么样。
- en: '**Geoffrey Litt (00:25:20)**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:25:20)**'
- en: Alright, let's see how it goes. So, I'm going to kick us off with my goal, which
    is, I'm going to say, “I'm appearing as a guest on a podcast. I want an app that
    I can have open while I'm on the show to help me keep track of time and remember
    what I want to say.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看它是如何运行的。所以，我要开始我们的目标，那就是，我要说，“我作为一个客人出现在一个播客中。我想要一个我在节目中可以打开的应用程序，以帮助我跟踪时间并记住我想要说的话。
- en: Okay, so, great. We're getting clarifications live and I'm starting to read
    them and think through my answers, right? So time-tracking. Maybe I'll just keep
    going and answer these questions. Okay. Thanks. Okay, great. So we got answers.
    let's go through one by one and, I'm going to think through my answers to these
    questions.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以，很好。我们正在实时澄清，并且我开始阅读它们并思考我的答案，对吧？所以时间跟踪。也许我会继续并回答这些问题。好的。谢谢。好的。所以我们得到了答案。我们逐个进行，我要思考我的答案到这些问题。
- en: So first, time-tracking, it's saying, do I need a simple stopwatch or a countdown
    timer? So I'm just going to say, I want a progress bar. Or I'll say digital clock
    plus progress bar. going from 9:00 a.m. to 10:30 a.m. Now, one really neat thing
    is we don't need the app to have a place to set the time start and end because
    it's an app literally just for this one appearance on this show and I'm with you
    today this morning from 9 to 10:30 a.m.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是时间跟踪，它在说，我需要一个简单的秒表还是倒计时器？所以我只会说，我想要一个进度条。或者我会说数字时钟加进度条。从上午9:00到上午10:30。现在，一个非常棒的事情是，我们不需要应用程序有一个设置时间开始和结束的地方，因为它就是一个应用程序，只是为了这个节目的一个场景，今天早上我和你一起从9点到10点30分。
- en: So that's going to be hard-coded into the app, right? That's part of the ephemeral
    software. We don't need extra stuff. Preload notes or add and edit notes during
    the podcast. I guess preloading is fine. And by the way, I'm using—
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这将被硬编码到应用程序中，对吗？这是临时软件的一部分。我们不需要额外的东西。预加载注释或在播客期间添加和编辑注释。我想预加载是可以的。顺便说一句，我正在使用—
- en: '**Dan Shipper (00:26:57)**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:26:57)**'
- en: We have a Notion link with notes. It'd be cool if it could display that.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个包含注释的Notion链接。如果能够显示那将很酷。
- en: '**Geoffrey Litt (00:27:02)**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:27:02)**'
- en: Oh yeah. Should it be able to show the Notion link? Or do you copy-paste in
    markdown from the Notion? What do you think?
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 噢是的。它应该能够显示Notion链接吗？还是你从Notion中复制粘贴markdown？你觉得呢？
- en: '**Dan Shipper (00:27:09)**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:27:09)**'
- en: I mean, ideally it shows the notion, it shows the Notion like in an iframe or
    something.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，理想情况下，它应该显示Notion，像在一个iframe或者其他地方。
- en: '**Geoffrey Litt (00:27:14)**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:27:14)**'
- en: Okay. So, it's funny. You just used the word iframe, so that revealed that you
    are thinking on the technical side of this too, right? And I think we might want
    to linger there for a second. And this is another instance of what I said earlier,
    where having background knowledge about programming is a huge accelerant to this
    process right now. And the reality is, this workflow we're doing, in my experience,
    doesn't work that well for people who have zero programming experience yet. I
    want to build tools that help get us there in the future, but it's interesting.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以，有趣的是。你刚刚用了 iframe 这个词，所以这表明你也在思考技术方面，对吧？我认为我们可能想在那里停留一下。这是我之前说的另一个例子，即具有关于编程的背景知识对于目前的这个过程是一个巨大的加速剂。而事实上，根据我的经验，我们正在做的这个工作流程对于那些没有编程经验的人来说效果不是很好。我希望能够构建一些工具，帮助我们未来实现这一点，但这很有趣。
- en: So let's say we have our notes in Notion. Maybe we could show those, embed those
    somehow, or copy-paste them. I'll let Chat sort of make a call on how to sort
    of proceed with that. Styling or layout preferences? I like giving it a vibe here.
    One vibe I had in my mind is I kind of like the Keynote presenter mode. So I could
    just say like “simple, dark keynote presenter mode, vibes,”
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们假设我们的笔记在 Notion 中。也许我们可以展示它们，以某种方式嵌入它们，或者复制粘贴它们。我会让 Chat 在如何进行处理方面做出决定。样式或布局偏好？我喜欢在这里给它一个感觉。我心中有一个感觉，我有点喜欢
    Keynote 的演示者模式。所以我可以说“简单，黑暗的 Keynote 演示者模式，氛围，”
- en: '**Dan Shipper (00:28:27)**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀 (00:28:27)**'
- en: I like that. Cause I feel like when you give it vibe, it kind of knows to be
    fuzzy about it rather than like very direct.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这个。因为我觉得当你给它氛围时，它会知道要模糊一些，而不是非常直接。
- en: '**Geoffrey Litt (00:28:32)**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特 (00:28:32)**'
- en: Yeah, for sure. By the way, quick meta note, I'm using the numbers here, which
    is just a great shortcut for responding directly to each of the things without
    too much time,
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，当然。顺便说一句，快速的元注释，我在这里使用数字，这只是一个很好的快捷方式，可以直接回答每个事情，而不需要花费太多时间，
- en: '**Dan Shipper (00:28:42)**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀 (00:28:42)**'
- en: And by that you mean like it gave you four questions and you're using numbers
    to—
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你的意思是它给了你四个问题，你用数字来—
- en: '**Geoffrey Litt (00:28:48)**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特 (00:28:48)**'
- en: Exactly, I'm just using the numbers one, two, three, four to refer to each of
    them. I don't need to say like for the time tracking thing I want, I just reduce
    extra words. Number four. Any other features? I think that we could have cool
    ideas in the future, but I'm just going to say “Not yet. start simple.” Alright.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 没错，我只是用数字一、二、三、四来指代它们中的每一个。我不需要说像对于时间跟踪的事情我想要什么，我只是减少多余的词语。第四个。还有其他功能吗？我认为我们将来可能会有很酷的想法，但我只想说“还没有。简单开始。”好的。
- en: '**Dan Shipper (00:29:12)**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀 (00:29:12)**'
- en: See what we get!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们得到什么！
- en: '**Geoffrey Litt (00:29:14)**'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特 (00:29:14)**'
- en: So, it's going to do the plan first. The plan, this is really important. If
    you have it generate code without a plan, it tends to get stuck in weird corners
    that it can't get out of. And, having it generate a plan first, just like a real
    human engineer doing any coding work. Having a plan first really starts… So let's
    see, it's done.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，首先要制定计划。计划，这一点非常重要。如果没有计划就生成代码，它往往会陷入无法摆脱的奇怪境地。而且，首先生成一个计划，就像一个真正的人类工程师做任何编码工作一样。首先有一个计划真的很重要...
    让我们看看，它完成了。
- en: '**Dan Shipper (00:29:41)**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀 (00:29:41)**'
- en: One thing that's interesting is, for the notes section, it’s suggesting a text
    area where notes can be copy-pasted rather than doing the embedded Notion iframe
    thing. So that's an interesting decision it
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的一件事是，对于笔记部分，它建议使用文本区域，其中可以复制粘贴笔记，而不是采用嵌入的 Notion iframe。所以这是一个有趣的决定
- en: '**Geoffrey Litt (00:29:52)**'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特 (00:29:52)**'
- en: 'Absolutely. Yes. We don''t know why it made that decision. Presumably it''s
    because it''s easier. We can push it towards the embed later. It is nice that—I
    like having this early sort of planning section because it''s a quick way to see
    what it''s about to do. So we don''t need to try to read the code. We can just.
    It''s writing a spec document as a product manager that we get to look at and
    this all looks pretty good to me: Current time, progress bar, copy paste text
    area, a read only mode to avoid accidental edits during the podcast is kind of
    a fun idea. We''ll see if it incorporates that.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对。是的。我们不知道它为什么做出了那个决定。可能是因为更容易。我们可以将其推向嵌入部分。很棒-我喜欢这早期的计划部分，因为这是一个快速了解它将要做什么的方式。因此，我们不需要尝试阅读代码。我们可以。它正在撰写一个规格文件，作为产品经理，我们可以看一下，这一切看起来对我来说都很不错：当前时间，进度条，复制粘贴文本区域，只读模式以避免在播客期间意外编辑是一个有趣的想法。我们将看看它是否包含了那个。
- en: 'Now, let''s see: The second thing it did is a pseudocode plan. As a programmer,
    this is really helpful for me because I can actually look at this and see if there''s
    anything that looks like it''s going to need to be fixed in there. So while it''s
    writing the code, we can review that.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看：它做的第二件事是一个伪代码计划。作为一个程序员，这对我来说非常有帮助，因为我实际上可以看看这个，看看有没有任何看起来需要修正的地方。所以在它编写代码的时候，我们可以进行审查。
- en: '**Dan Shipper (00:30:47)**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希彭（00:30:47）**'
- en: And it's not just useful for you. I think it's also useful for ChatGPT to write
    out the product spec, write out the pseudocode, and then actually write the code.
    And in the same way that it's useful for a programmer to write pseudocode, I think
    it's, it's useful for ChatGPT so it doesn't, it doesn't go off the rails. It can
    plan what it's going to be doing and all that kind of stuff.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这不仅对你有用。我认为这对ChatGPT写出产品规格，写出伪代码，然后实际编写代码也是有用的。就像对程序员来说写伪代码很有用一样，我认为对ChatGPT来说也是有用的，这样它就不会偏离轨道。它可以计划它将要做的事情，以及所有这些。
- en: '**Geoffrey Litt (00:31:07)**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:31:07）**'
- en: Yes, absolutely, my general philosophy about this is, just, yeah, just like
    humans need to plan the right amount for the magnitude of the task… As a skilled
    programmer, I can go do a super quick bug fix or tiny feature without writing
    a whole doc explaining what I'm going to do.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，绝对的，我对此的一般理念是，就像人类需要为任务的规模做出正确的计划一样...作为一个有经验的程序员，我可以做一个超快的错误修复或微小的功能，而不需要写一整份文档来解释我要做什么。
- en: But if I'm going to spend six months on a huge project, I better have a plan
    when I start. And so I think similarly about like, I try to calibrate my sense
    of how good is ChatGPT at this task and the worse it is the more planning is going
    to be needed up front and the more coaxing to make sure we sort of gently approach
    the goal. And so coding for me, this is sort of the right level of planning, I
    think, for this is not a huge app. It's a tiny little thing. So I think we haven't
    needed that much iteration.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我要花六个月的时间做一个巨大的项目，我最好在开始时就有一个计划。所以我认为类似地，对于像我一样的人来说，对ChatGPT在这个任务上的表现有一个校准感...它需要更多的前期规划和更多的讨好来确保我们温和地接近目标。因此，对我来说，编码，这是我认为这个任务的适当水平的规划。这不是一个巨大的应用程序。这只是一个小东西。所以我认为我们不需要那么多的迭代。
- en: Yeah. Okay. So we got this code. I'm not going to read it. I never read this
    stuff. I just copy-paste and go.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。好吧。所以我们得到了这段代码。我不会读它。我从不读这些东西。我只是复制粘贴然后走开。
- en: '**Dan Shipper (00:32:02)**'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希彭（00:32:02）**'
- en: Why don't you read it? Tell me why.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么不读它？告诉我为什么。
- en: '**Geoffrey Litt (00:32:04)**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:32:04）**'
- en: It's a waste of time. Why would I? Why would I spend time reading this? Yes,
    I can read this, but it's dumb. I would rather just see what it did and use the
    thing. Maybe I'll read it
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种浪费时间。我为什么要这样做？我为什么要花时间读这个？是的，我可以读这个，但这很愚蠢。我宁愿看看它做了什么，然后使用这个东西。也许我会阅读它。
- en: '**Dan Shipper (00:32:14)**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希彭（00:32:14）**'
- en: 'Okay. And you''re flipping to Replit. So explain to us what this is: What Replit
    is and like how you got—what are all these files? Like, give us a, give us a background.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 好。你正在切换到Replit。所以向我们解释一下这是什么：Replit是什么以及你是如何得到这个-这些文件是什么？给我们一个背景。
- en: '**Geoffrey Litt (00:32:25)**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:32:25）**'
- en: Yep. So Replit is an online coding environment where you can set up a quick
    environment to run any kind of code, and then you can edit it in your browser
    and have it running. And I can also share this link now with other people who
    can collaborate with me in this coding environment and use the sort of resulting
    application.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。所以 Replit 是一个在线编码环境，你可以建立一个快速的环境来运行任何类型的代码，然后你可以在浏览器中编辑它并运行它。我还可以现在与其他人分享这个链接，在这个编码环境中与我合作，并使用所得到的应用程序。
- en: The reason I use it is because it's just one quick way to get running without
    a bunch of fuss and ceremony. And before this interview I set up just a little
    template that has sort of the tech stack that I told ChatGPT to use—it's pre-installed
    here and ready to go. I can share that as a template with you—as a link or something,
    but that's all I have going on here.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用它的原因是因为这是一个快速启动的方式，没有太多的麻烦和仪式感。在这次采访之前，我设置了一个小模板，其中包含我告诉 ChatGPT 使用的技术栈，它已经预先安装好并准备就绪。我可以将其作为一个模板与你分享——作为一个链接或其他什么，但这就是我在这里所做的一切。
- en: '**Dan Shipper (00:33:12)**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:33:12)**'
- en: That's really interesting. And I just want people. Anyone who's non-technical
    who's watching this to realize this might look complicated, but Replit is very
    templatized. It's very easy to just click a button and get something that looks
    like this and know where to paste your file. And B, you can actually… Everything
    that we've done so far is pretty natural language. You can actually get this far
    even with very little programming knowledge. And, and so if it feels intimidating,
    it’s really not that hard. And I think that's one of the wonderful things about
    this.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这真的很有趣。我只是希望那些非技术人员，那些在观看这个视频的人意识到，这可能看起来很复杂，但 Replit 很模板化。只需点击一个按钮，就能获得类似这样的东西，并知道在哪里粘贴你的文件。另外，你实际上可以……
    到目前为止我们所做的一切都是相当自然语言的。即使你几乎没有编程知识，你也可以做到这一点。如果感到有些吓人，那其实并不那么难。我认为这是其中的一件美好的事情。
- en: '**Geoffrey Litt (00:33:50)**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:33:50)**'
- en: So with that let's paste in our code and see what happens. Yeah, I'm just pasting
    from ChatGPT. This should update live, this little window here.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们粘贴我们的代码，看看会发生什么。是的，我只是从 ChatGPT 那里粘贴过来的。这个小窗口应该会实时更新。
- en: '**Dan Shipper (00:34:02)**'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:34:02)**'
- en: Oh my God.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 天啊。
- en: '**Geoffrey Litt (00:34:04)**'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:34:04)**'
- en: Look at that. So, it has the time—it's correct. The time is the current time.
    It's going from 9-10:30\. I'm just eyeballing it. That looks right. Right. It's
    9:50, but the halfway mark is 45 minutes. Okay. Awesome. It did the simple dark
    theme pretty well, I would say. And then, let's see, can we type in this box?
    Okay, it has a box for notes. Pretty good, pretty good first draft so far.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧那。所以，它显示的时间是正确的。时间是当前时间。从 9 点到 10:30。我只是用眼睛看了看。看起来没错。没错。现在是 9:50，但中间点是 45 分钟。好的。太棒了。它相当好地完成了简单的暗色主题，我想说。然后，让我们看看，我们能在这个框里输入吗？好吧，它有一个用于笔记的框。到目前为止，第一稿还是相当不错的。
- en: '**Dan Shipper (00:34:35)**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:34:35)**'
- en: This is magic. This is crazy. We have to stop for a second and just appreciate
    how wild it is that we live in a time like this, where the amount of time and
    knowledge and effort that it would have taken just a year ago to do the same thing
    is sort of like mind-blowing. It's stunning how different this is. Obviously the
    code that the eventual code that has been written by ChatGPT is not that hard
    to write for like a senior programmer or whatever. But, still, it might take an
    hour or two or whatever, even for, even for someone who knows what they're doing.
    And this did not take an hour. It took five minutes. And, and it did, it also
    didn't require a senior programmer to do. Literally, you didn't write any code.
    Literally, you didn't even look at the code. You literally just typed here's kind
    of what I want and ask some clarifying questions. And now you have an app that
    the thing I love about this is it's styled and it has this cool progress bar that
    updates live.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这太神奇了。太疯狂了。我们必须停下来，好好欣赏一下我们生活在这样一个时代是多么疯狂，以前要做同样的事情所需的时间、知识和精力是多么惊人。这是多么不同寻常的事情。显然，最终由
    ChatGPT 编写的代码对于像高级程序员之类的人来说并不难写。但是，即使对于知道自己在做什么的人来说，可能也需要一个小时或两个小时。但这并不需要一个小时。只用了五分钟。而且，它也不需要一个高级程序员来完成。从字面上说，你没有写任何代码。从字面上说，你甚至没有看过代码。你只是在这里输入“这是我想要的东西”，并问了一些澄清性的问题。现在你有了一个应用程序，我喜欢的一件事是它有样式，并且有这个很酷的进度条，可以实时更新。
- en: '**Geoffrey Litt (00:35:34)**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:35:34)**'
- en: Yeah, it's so exciting. So. I want to analyze this from, on the one hand, I
    couldn't agree more with you. It is so cool and exciting. Even for me as a programmer,
    like you said, I wouldn't have spent the time to make this thing. And the fact
    that it's 10 or 100x faster for me to make increases the number of things I'm
    willing to make. I will note like, again, We're going to push it further and see
    where the limits are now, but we operated within a simple starting point and,
    as we push this thing further, we're going to hit more challenges. So we haven't
    solved all the issues yet, but this is, I agree. It's a very exciting starting
    point.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这太令人兴奋了。所以。我想从这个方面分析一下，一方面，我完全同意你。这太酷了，太令人兴奋了。即使对我作为一个程序员来说，就像你说的，我也不会花时间做这个东西。而且它比我做的快10倍或100倍，这增加了我愿意做的事情的数量。我会注意到，再说一次，我们将进一步推动它，并看看现在的限制在哪里，但我们在一个简单的起点上运作，当我们进一步推动这个东西时，我们会遇到更多的挑战。所以我们还没有解决所有的问题，但我同意。这是一个非常令人兴奋的起点。
- en: One little thing I'll point out that's interesting about this app right now
    as an example of some of the drawbacks. So, this stack that I tell ChatGPT to
    use as my simplest sort of micro app stack. It doesn't save your data at all.
    So actually, if I reload this, and let me, I can open this in a new tab. So, here's
    the app full screen, I guess. And I can have notes here. but if I ever reload,
    they're lost. I know that limitation as the person who put together this tech
    stack.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的小细节我要指出，这个应用现在正好作为一些缺点的例子。所以，这个我告诉 ChatGPT 使用的堆栈是我最简单的微型应用堆栈。它根本不保存你的数据。所以实际上，如果我重新加载这个，让我，我可以在新标签页中打开这个。所以，这就是全屏的应用，我想。我可以在这里做笔记。但是如果我重新加载，它们就丢失了。作为组装这个技术堆栈的人，我知道这个限制。
- en: And one of the reasons I chose that stack is intentionally because saving data
    often makes apps way more complicated. Now I have other stacks I can play with
    that I haven't set up for this that can save the data. But when I'm thinking of
    ideas in my head, I'm thinking a lot about things like, how can I scope this thing
    so I don't need to have that technical complexity? And that's a skill that engineers
    and PMs, you drill a lot, but normal people haven't thought about as much. So,
    I think it points to both, of course… In another version of this, we should have
    a GPT that can make apps that can store data.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择那个堆栈的一个原因是故意的，因为保存数据通常会使应用程序变得更加复杂。现在我有其他的堆栈可以玩，我还没有为此设置过，可以保存数据。但是当我在脑海中构思想法时，我在考虑很多东西，比如，我怎样才能限定这个东西，这样我就不需要那么多的技术复杂性？这是一种工程师和产品经理经常训练的技能，但普通人想得不那么多。所以，我认为这既指向了……在这个版本的另一个版本中，我们应该有一个可以制作可以存储数据的应用程序的
    GPT。
- en: That's a no-brainer, but there's a broader point, which is this negotiation
    of complexity of implementation and requirements is a delicate dance that we're
    going to have to work towards better tools that help people do that.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个不费脑筋的事情，但还有一个更广泛的观点，那就是这种实现和需求的复杂性协商是一个微妙的舞蹈，我们将不得不努力寻求更好的工具来帮助人们做到这一点。
- en: '**Dan Shipper (00:37:43)**'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希普（00:37:43）**'
- en: I think you're right. I also will note. So, definitely, saving state and doing
    logins and authentication, for example, are some of those things where you're
    like, yeah, that's, that's a little bit more complicated. Two, I think that those
    things are getting easier and easier over time. And, I can imagine because this
    is a single-use app, you don't even need a database. You can just save something
    to like a notes file or like save it in local storage or whatever. So I think
    that that makes it easier, but there are also services like Supabase or all these
    other things that just makes it super, super easy to interact with the database.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为你是对的。我也要注意到。所以，无疑，保存状态和执行登录和身份验证，例如，是一些更复杂的事情。其次，我认为这些事情随着时间的推移变得越来越容易。而且，我可以想象，因为这是一个单次使用的应用程序，你甚至不需要一个数据库。你可以将一些东西保存到像笔记文件之类的地方，或者保存在本地存储中，或者其他什么地方。所以我认为这使得事情变得更容易了，但也有像
    Supabase 或所有这些其他东西这样的服务，它们使得与数据库交互变得非常非常容易。
- en: 'And what I don''t want people to come away with is the idea that, I think you''re
    right: There are all these hidden corners that you can see or maybe I can see
    that, we know, okay, like saving state is going to be hard, so we''re going to
    scope away from that for now. And that definitely saves us time. But even if you''re
    someone who''s using ChatGPT who doesn''t know that, you''re going to find that
    out because you''re going to be like, “Hey, can we save state?” And then you''re
    going to get stuck for like four hours. And that''s actually the only way to learn.
    So it''s actually not bad that you don''t know that. It''s just that, I think
    what you''re actually saying is not that normal people who don''t have a lot of
    programming experience can''t use ChatGPT for this like they can, it''s just it
    will take them longer and they will run into problems.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我不希望人们误解我的意思，我觉得你说得对：有一些隐藏的角落，你可以看到，或者我可以看到，我们知道，好吧，比如保存状态会很困难，所以我们现在要避开这个。这确实能节省我们时间。但即使你是一个使用ChatGPT的人，你不知道这一点，因为你会发现这一点，因为你会说，“嘿，我们能保存状态吗？”然后你会卡住，大约四个小时。这其实是学习的唯一方式。所以你不知道这一点其实并不坏。只是，我觉得你实际上说的不是普通人没有编程经验就不能用ChatGPT来做这些事情，他们可以，只是他们需要更长的时间，而且会遇到问题。
- en: It's not like ChatGPT is going to solve every problem for you right now. There
    are still things that experienced developers are going to know and be able to
    push the Chat to do and not do that is going to save them even more time than
    first for a normal person. But it's still quite useful for someone who has very
    little to no programming experience. Yeah, it sometimes is not going to solve
    every problem for you, just some of the problems.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT并不会立刻解决你所有的问题。有些事情，有经验的开发者会知道，并且能够让Chat做到或者不做到，这样会比一个普通人节省更多的时间。但对于一个几乎没有编程经验的人来说，ChatGPT仍然非常有用。是的，有时它并不能解决你所有的问题，只能解决其中的一些问题。
- en: '**Geoffrey Litt (00:39:24)**'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:39:24)**'
- en: Yeah, that's a great point. I'm not trying to discourage anyone from using this
    workflow. If you don't know how to program, just be curious, ask how hard it would
    be to do various things, and try to get those answers.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是一个很好的观点。我并不是在打击任何人使用这种工作流程。如果你不懂编程，只需保持好奇心，问问做各种事情有多难，然后试着找到这些答案。
- en: One quick plug I'll give is the research I'm doing. So I work at an independent
    research lab called Ink & Switch, which has pioneered a software architecture
    called local-first, which has a bunch of interesting benefits for users like data
    privacy and ownership. But actually, one of the most interesting benefits for
    this use case is that we're trying to make it really, really simple to make an
    app that stores your data, can sync it with other people where you can share data,
    have it all saved privately. And that shouldn't require setting up some server
    that you have to run and thinking about operations, it should literally be like
    one line of code and you're off and running, you're storing data, you're syncing
    it. And so we're doing a lot of work right now on trying to create an environment
    based on that local-first architecture using a library at Ink & Switch called
    automerge, where when you make an AI-generated app, you should be able to plop
    it into that environment and instantly you get authentication, data sync, data
    storage, all out of the box for free, no servers in the mix. And I'm really excited
    about that as one specific future thing to make it easier to build really full
    functioning, tools that go beyond just a little stateless thing, right?
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我要推荐的事情是我正在做的研究。所以，我在一个叫Ink & Switch的独立研究实验室工作，我们开创了一种叫做local-first的软件架构，对用户有很多有趣的好处，比如数据隐私和所有权。但实际上，对于这种情况来说，最有趣的好处之一是，我们正在尽力使得应用程序存储你的数据、可以将其与其他人同步，你可以共享数据，所有这些都会被保存在私密空间。而且这不应该需要设置某些必须运行的服务器，或者考虑操作，它应该只需要一行代码，然后你可以开始，你可以存储数据，你可以同步它。所以，我们现在在努力通过Ink
    & Switch的一个叫做automerge的库，基于local-first架构创建一个环境，当你制作一个AI生成的应用程序时，你应该能够将其放入那个环境，然后立即获得认证、数据同步、数据存储，所有这些都是免费的，没有服务器的混合。我对此非常激动，因为这是一个未来的具体事情，可以使得构建真正全功能、超越了一个小无状态的工具，变得更容易。
- en: One specific example here is that I'm not going to do this today, but in the
    future, if I have my notes in Notion, maybe we'll try embedding this thing, but
    the app should be able to maybe load my Notion notes directly into this view in
    a different way, and access those existing notes I have without me needing to
    copy-paste them, right?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个具体例子是，我今天不打算做这个，但是将来，如果我把我的笔记放在 Notion 里，也许我们会尝试嵌入这个东西，但是应用程序应该能够以不同的方式直接加载我的
    Notion 笔记到这个视图中，并访问我已有的那些笔记，而不需要我复制粘贴它们，对吧？
- en: That's the thing I want for the future, but maybe do you want to keep going
    with this demo and see if we can get ChatGPT to save our notes in this?
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我未来想要的东西，但也许你想继续进行这个演示，看看我们是否能让 ChatGPT 在这个里保存我们的笔记？
- en: '**Dan Shipper (00:41:20)**'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:41:20）**'
- en: Let's do it. Yeah, that'd be great.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做吧。是的，那将会很好。
- en: '**Geoffrey Litt (00:41:22)**'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:41:22）**'
- en: Okay. So, let's give it a little bit of encouragement. This is a great start.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以，让我们给它一点鼓励。这是一个很好的开端。
- en: '**Dan Shipper (00:41:27)**'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:41:27）**'
- en: Always got to encourage the AI in case it takes over.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 总是要鼓励 AI，以防它接管。
- en: '**Geoffrey Litt (00:41:30)**'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:41:30）**'
- en: Let's be nice and, yeah, gain brownie points. But actually also I find that
    I want to tell it that it's on the right track so it doesn't freak out and totally
    re-do everything. “Is there some way we can save the notes that we've entered
    in the browser so they don't get lost when we reload?”
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们友好一点，是的，赢得好感。但实际上，我也发现我想告诉它它走在正确的道路上，这样它就不会惊慌失措，完全重新做一遍。"有没有办法我们可以保存我们在浏览器中输入的笔记，这样当我们重新加载时它们就不会丢失？"
- en: '**Dan Shipper (00:41:57)**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:41:57）**'
- en: And I want to point out that's a question that anyone can ask. I'm sure you
    have some thoughts about the way that it should do this, but we'll see how good
    ChatGPT is at finding the answer that you would have gone with.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我想指出，这是任何人都可以问的问题。我相信你对它应该如何做有一些想法，但我们将看看 ChatGPT 在找到你会选择的答案方面有多好。
- en: '**Geoffrey Litt (00:42:10)**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:42:10）'
- en: Exactly. It said an answer. It's going to say, we're going to save them in local
    storage. As an engineer, I know that that's a perfectly fine way to think about
    it. And then it's just going to output all the new codes. So, generally for little
    tools like this, I just tell it, the system prompt, I think, says to just output
    the entire new code and that's really the, the simplest thing you can do. And
    it's nice because what I'm going to do is just copy this and paste it into Replit
    again, once it's done, and we'll see what it changed. Sometimes for larger things,
    I like to tell it a different prompt, which is to generate minimal edits and only
    tell me the parts that change just cause it's faster. But that is a little bit
    more annoying cause then you actually have to like start thinking about where
    you're copy-pasting. and that can be a bit annoying. Okay, so, I pasted in the
    new code. There's no visual difference. I'm going to reload to make sure we got
    the new version. These are my notes.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 没错。它说了一个答案。它会说，我们会将它们保存在本地存储中。作为一名工程师，我知道这是一个完全可以接受的方式来考虑它。然后它将输出所有的新代码。所以，通常对于像这样的小工具，我只告诉它，系统提示，我想，说要输出整个新代码，这真的是你可以做的最简单的事情。而且这很好，因为我做的就是复制并粘贴这个，一旦它完成，我会再次粘贴到
    Replit 中，然后我们会看到它改变了什么。有时对于较大的事物，我喜欢告诉它一个不同的提示，即生成最小的编辑并且只告诉我更改的部分，因为这样更快。但那有点烦人，因为你实际上必须开始考虑你在复制粘贴哪里。而且这可能有点烦人。好的，所以，我粘贴了新代码。没有视觉上的差异。我要重新加载以确保我们得到了新版本。这些是我的笔记。
- en: Let's reload. It worked! Ah! Amazing! And if I come over here and reload. Reload.
    Reload. Okay, the notes are saved.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新加载。成功了！啊！太棒了！如果我过来再次重新加载。重新加载。重新加载。好的，笔记已保存。
- en: '**Dan Shipper (00:43:25)**'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:43:25）**'
- en: That's amazing. And one thing that we should be clear on, like, that website
    is live. Like, you can send me that URL and it's live. It will not save the notes.
    I'll have my own version of the notes. So we each have our own notes, rather than
    there being one common note that, which is an important detail to point out.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 那太棒了。还有一件事我们应该明确，就是，那个网站是实时的。就像，你可以把那个 URL 发给我，它是实时的。它不会保存笔记。我会有自己版本的笔记。所以我们每个人都有自己的笔记，而不是有一个共同的笔记，这是一个重要的细节要指出。
- en: '**Geoffrey Litt (00:43:45)**'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:43:45）**'
- en: It's funny too. You just, again, used your programming knowledge to, to say
    that. We could have also asked chat, “Does everyone using the app share one note
    saved or does everyone have their own?”
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这也很有趣。你又一次利用你的编程知识来说这个。我们也可以问聊天，“每个使用该应用程序的人共享一个保存的笔记，还是每个人都有自己的？”
- en: Okay, so every user has their separate and unique set of notes. Great. Okay,
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以每个用户都有他们独特的一套笔记。很好。好的，
- en: '**Dan Shipper (00:44:12)**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:44:12)**'
- en: So, there's something really interesting going on here for me. Like this is
    such a different way of thinking about how to build programs, not because it's
    just AI-built, but, for example, having everything be in one file, or saving things
    locally is just, it's a different paradigm from the current way that we build
    SaaS apps where it's like microservices or like breaking up into modular components,
    and like having, having databases and authentication or whatever. And it's this
    fundamentally new thing that is only possible because you want to build bespoke
    apps for like small use cases that are used by single people.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对我来说，这里有一些非常有趣的事情。就像这是一种完全不同的构建程序的方式，不仅仅因为它是由AI构建的，而是，例如，将一切都放在一个文件中，或者本地保存东西只是，它与我们当前构建SaaS应用程序的方式完全不同，那就像是微服务或者像分解成模块化组件，还有像数据库和身份验证之类的。而且这只有因为你想要为单个人使用的小用例构建定制应用程序，所以这才是可能的。
- en: And that's like, that's actually just like a new world that is starting to blossom
    a little bit that we don't, we don't know where it's going to go, but I just want
    to underscore for people how much, okay. So there's this new workflow, which makes
    people incredibly more productive. It gives people who can't code the ability
    to build stuff. So it's taking people from 0 to 10, right. And then it also takes
    people who can build stuff and it makes them. I don't know, 30 percent faster
    or whatever, but I think what's really important that you mentioned earlier is
    it's not just about speed upgrades, it makes it possible for you to build things
    that you just wouldn't have put the time into before.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像是，这实际上就像是一个新的世界开始有一点点绽放，我们不知道它会走向何方，但我只是想强调一下，这对人们有多么重要。所以有了这个新的工作流程，使人们变得更加高效。它让那些不懂编程的人也能建立东西。所以它让人们从0到10，对吧。然后它还让那些会建立东西的人。我不知道，快了30%，或者其他什么，但我认为你之前提到的最重要的是它不仅仅是关于速度的提升，它使你有可能建立以前你根本不会花时间去做的东西。
- en: Like you just wouldn't have made this before at all. and so maybe you make 10
    or 20 more things in the world per year because of this that you wouldn't, you
    wouldn't have made previously. So. Big performance workflow difference. But then
    also it's like, it's a different kind of software. It's just different—it's a
    new thing. There's something coming now that's different from SaaS that is enabled
    by exactly this stuff. And we're just starting to see what it's like. And this
    is like the earliest inklings of that. And it's so cool to see it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你以前根本不会做这个一样。所以也许你每年会多做10或20件事情，因为这个你之前不会做的事情。所以。巨大的性能工作流差异。但是它也像是，它是一种不同类型的软件。它只是不同——这是一种新的东西。现在有一些不同于SaaS的东西，正是由于这些东西的出现才使得它成为可能。我们刚刚开始看到它是什么样子。而这只是最早的迹象。看到这一点真是太酷了。
- en: '**Geoffrey Litt (00:46:09)**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:46:09)**'
- en: Exactly. One thing I love, if you look at this app, it's so simple. It has nothing
    I don't need because we're building it up from zero. And I've been finding in
    building these little tools for myself, one question you might ask is like, “Wouldn't
    it be better to go find some existing app?” because someone else who's better
    or who's either, more skilled than you at coding or design or has just spent a
    lot more time thinking about it. Maybe there is a podcast guest app out there
    or something. I haven't looked, but in my experience, a lot of the time it's actually
    faster now for me to just make the thing that has the tiny features that I need
    than to go try to Google which one is the best and learn how to use it. And I
    love the pared-down kind of like nothing-is-there-unless-I-specifically-added-it-to
    quality of these micro micro tools.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 没错。我喜欢的一件事是，如果你看这个应用程序，它非常简单。它没有我不需要的任何东西，因为我们是从零开始构建它的。在为自己构建这些小工具的过程中，我发现你可能会问的一个问题是，“去找一些现有的应用程序会不会更好？”因为其他人可能比你更擅长编码或设计，或者仅仅花了更多的时间思考它。也许有一个播客嘉宾应用程序，我还没找过，但根据我的经验，很多时候，现在对我来说其实更快速的方法是，直接制作我需要的微小功能的东西，而不是去尝试谷歌哪一个是最好的并学会如何使用它。我喜欢这种精简的，除非我明确添加它的质量这种微型微型工具的品质
- en: '**Dan Shipper (00:46:58)**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:46:58)**'
- en: Yeah, that's really cool. You know what this reminds me of? Have you been looking
    at what Jason Fried and [David Heinemeier Hansson] are doing at 37signals? They
    have this new I guess software company underneath 37 signals. It's called Once.
    And, basically it's on-premise software for consumers. They're making some sort
    of app for like prosumer business people, where when you buy it, instead of paying
    a SaaS fee, you pay once and then you get all the code. The code is not minified
    or bundled or whatever. It's just like this. It's mostly in one or a few files
    and you can read it. And it's owned by you, modifiable by you, and I think you're
    pushing this forward from a research direction, what's possible to enable this
    stuff. And they're already sort of thinking about, okay, how do you commercialize
    this new kind of software? How do people pay for it? And all that kind of stuff.
    I think that's really interesting.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这真的很酷。你知道这让我想起了什么吗？你有没有关注Jason Fried和[David Heinemeier Hansson]在37signals正在做的事情？他们在37signals底下有这样一个新的，我猜可以称之为软件公司。叫Once。基本上是面向消费者的本地软件。他们正在为像职业用户这样的商业人士制作某种应用程序，在你购买它时，不需要支付SaaS费用，你只需付款一次，然后你就得到了所有的代码。代码没有经过最小化或捆绑处理。它就像这样。它主要在一个或几个文件中，你可以阅读它。它是你拥有的，可以由你修改的，我认为你正在从研究方向推动这些可能性。如何商业化这种新型软件？人们如何为它付费？以及所有这些。我觉得这真的很有趣。
- en: '**Geoffrey Litt (00:47:54)**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:47:54)**'
- en: Yeah, I love that sort of direction. And in my research at Ink & Switch, we're
    pushing towards, again, this new kind of software distribution platform where
    you own your tools and you have the capability to modify them.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我喜欢这种方向。在我在Ink & Switch的研究中，我们正在努力向着一个新型的软件分发平台迈进，你可以拥有你自己的工具，并且有能力修改它们。
- en: That's another quick point I want to make that's really important to me is that
    starting from zero and starting from scratch isn't always the ideal workflow.
    Often what I actually would prefer is to start with an app that someone else made
    that's almost right, but I just need to make a small tweak. That's something that's
    much harder in today's software world, because often, like I said earlier, you're
    not allowed to make that tweak. You can't do it because of infrastructural reasons.
    And so what I'm showing here is kind of the easy path that works in the current
    world, which is just to start over from scratch. But I think actually in the future,
    there'll be less starting over from scratch and more sort of modding and remixing.
    And that's going to be possible once. Imagine I send you this Replit link. You
    can look at, you can actually take that code… One thing I do sometimes in Chat
    is you could make your own ChatGPT session with this bot and say, “Hey, I'm starting
    from this app and paste in the code.” And say, “what I want to do is add this
    other feature” and it will just pick up that process where I left off and it's
    in your hands now and someone else might do it—
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:49:09)**'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Should we do it?
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:49:11)**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Yeah, do you want to try it?
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:49:13)**'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Let's do it.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:49:15)**'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so do you want to simulate it where I, I make a new Chat basically, or
    do you actually—
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:49:16)**'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: No, no, no. I want to do it.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:49:18)**'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Okay. Well, yeah. Let's do it. I love that.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:49:22)**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: So, send me the REPL, and then I need a link to your custom GPT so I have the
    same stuff.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:49:29)**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Yes. Oh, this is going to be fun. So we got the REPL—
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:49:37)**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: So you should be able to see my screen now, right?
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:49:40)**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Yep.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:49:42)**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Okay, cool. So, okay, so you took that REPL that you just made and, and the
    REPL is basically just all the code we wrote in ChatGPT and you sent it to me.
    And what's really cool is with Replit, like I can either press “run” and it'll
    just run it. For me, and that's really great, like this is a live thing that's
    just running on the web right now, or I can just press “fork” and, I can make
    “PodcastGuest (Dan's Version)” “way better than the old version,” and then I can
    press “fork.”
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: And, now I have all of the code that you wrote with ChatGPT, and it's somewhere
    in a source.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:50:24)**'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Look in source.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:50:25)**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: It's in source. Okay.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (00:50:27)**'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: App.tsx.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (00:50:28)**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: So it's right here, and that might be a thing that would take you a little while
    to figure out, but again, you could just throw all of this folder structure into
    ChatGPT and it would be like, “This is probably where the code is.”
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: And so now we've got to figure out what we want to do. We have this sort of
    initial thing that has a timer and has a note section. Okay, let's brainstorm
    a little bit. One thing we could do is, we could have a little window that takes
    the notes and then asks GPT-4 to come up with sample questions.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得想想我们想做什么。我们有这样一个初步的东西，有一个计时器和一个笔记部分。好吧，让我们开动脑筋。我们可以做的一件事是，我们可以有一个小窗口，记录笔记然后要求
    GPT-4 给出示例问题。
- en: '**Geoffrey Litt (00:51:11)**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:51:11）**'
- en: Ooh, yeah, that's ambitious. I'm into it. I mean, I think
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，是的，这是雄心勃勃的。我很感兴趣。我是说
- en: '**Dan Shipper (00:51:16)**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:51:16）**'
- en: I mean, I think that's pretty doable, right? Because, I mean, really all we're
    going to have to do is take the notes. Well, we should, maybe we should ask ChatGPT.
    But take the notes, send them up to GPT-4 with a little prompt and then just display
    the answer somewhere. We might—
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，我觉得这应该是可行的，对吧？因为，我是说，我们实际上只需要做的是记录笔记。好吧，也许我们应该问问 ChatGPT。但是记录笔记，发送给 GPT-4，附上一个小提示，然后在某个地方显示答案就可以了。我们可能会——
- en: '**Geoffrey Litt (00:51:30)**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:51:30）**'
- en: Yeah, I’m into it. I think we should try it. Yeah. I think applying again, my
    engineering knowledge, the challenge is going to be making sure we finesse the
    API call to OpenAI correctly is something that I've sometimes find working with
    APIs can be a bit challenging because APIs change. It might not know about the
    latest format. Something that's going to come to mind is it's going to be really
    helpful if we give it like a successful example of an app that actually did a
    good job calling the OpenAI API. So we could try that pattern of, I could send
    you a link to another REPL where I've already done a good OpenAI call and we could
    tell it like “Use this app as sort of like a sample.”
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我很感兴趣。我认为我们应该试试。是的。我认为再次应用我的工程知识，挑战将是确保我们正确地优化调用 OpenAI 的 API，有时候我发现使用 API
    可能有点挑战，因为 API 可能会变化。它可能不知道最新的格式。一个想法是，如果我们给它一个成功调用 OpenAI API 的应用程序的示例，这将非常有帮助。因此，我们可以尝试这样的模式，我可以给你发送另一个已经成功调用了
    OpenAI 的 REPL 的链接，我们可以告诉它“使用这个应用作为样本”。
- en: '**Dan Shipper (00:52:15)**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:52:15）**'
- en: Well, what I want to do… I mean, the way that I usually get around this—and
    I think you're thinking about exactly the right stuff—is just paste the GPT-4
    API docs in there. So it knows how to call. It should have web browsing, but let's
    just try it.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我想做的... 我的做法一般是——我觉得你正在考虑的正是正确的事情——就是把 GPT-4 的 API 文档粘贴进去。这样它就知道怎么调用了。它应该具备浏览网页的功能，但让我们试试吧。
- en: So. I'm going to say something like, “I have a web app that I use to track my
    podcast recordings as I'm doing them and I want to add a feature. Here's the code
    I have so far. So I think just giving GPT the context is probably pretty important.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 所以。我要说的是，“我有一个网络应用，用来在我录制播客时跟踪我的录音，我想要添加一个功能。这是我目前的代码。我认为给 GPT 提供上下文可能非常重要。
- en: '**Geoffrey Litt (00:52:59)**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:52:59）**'
- en: Yeah, absolutely.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，绝对是的。
- en: '**Dan Shipper (00:53:00)**'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:53:00）**'
- en: So I'm just going to throw it in there and see what it says. Yeah. So, okay.
    I want to add a button. So it's basically saying, “Great, I see you have a basic
    web app for tracking podcast recordings. Could you please specify what feature
    do you like to add to your app?” I want to add a button that says “generate questions
    where it takes the podcast notes and then sends them to GPT-4 and return and displays
    the list of questions that GPT-4 returns.” And then the little note here is, when
    you're working with APIs, as you said before, and an API is like the GPT-4 service,
    right? The GPT-4 service has a way that you interact with it. And that changes
    over time as they make updates. And, ChatGPT is not always aware of all those
    changes. So the best way to. work through that is to just go to OpenAI.com or
    wherever the API is and look at the documentation for the API and just give it
    to ChatGPT so it knows, okay, here's actually how we call the API. So let's see,
    I think this is going to be good. So I just found an example of how the GPT-4 
    API is structured and I'm just going to paste it—
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我只是把它扔进去看看它会说什么。是的。所以，好吧。我想添加一个按钮。所以它基本上在说，“很好，我看到你有一个基本的网络应用程序来跟踪播客录音。您是否可以指定要向您的应用程序添加哪个功能？”我想添加一个按钮，上面写着“生成问题”，它获取播客笔记然后将它们发送到
    GPT-4 并显示 GPT-4 返回的问题列表。然后这里的小提示是，当您使用 API 时，就像您之前说的那样，API 就像 GPT-4 服务一样，对吧？GPT-4
    服务有一种与之交互的方式。随着它们的更新，这种方式会随着时间而改变。ChatGPT 并不总是了解所有这些变化。所以最好的方法是。通过去 OpenAI.com
    或者 API 的任何地方，并查看 API 的文档，然后将其提供给 ChatGPT，以便它知道，好的，这实际上是我们如何调用 API 的。所以让我们看看，我认为这会很好。所以我只是找到了
    GPT-4 API 结构的一个例子，我只是要粘贴—
- en: '**Geoffrey Litt (00:54:47)**'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:54:47)**'
- en: One quick note is you just copied some Python code, Dan, and we're in JavaScript.
    So that's a mistake that—
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 一个快速注意是，你刚刚复制了一些 Python 代码，丹，而我们是在 JavaScript 中。所以这是一个错误，那是—
- en: '**Dan Shipper (00:54:50)**'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:54:50)**'
- en: '[laughing] I''m just used to writing in Python.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[笑] 我只是习惯用 Python 写作。'
- en: '**Geoffrey Litt (00:54:55)**'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:54:55)**'
- en: This is a thing that, again, there's some programming knowledge to even know
    which of these things to copy, right? But I think a node one is gonna go better.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件事情，再次强调，甚至要有一些编程知识才能知道要复制哪些东西，对吧？但我认为节点一更好。
- en: '**Dan Shipper (00:55:02)**'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:55:02)**'
- en: Okay, so thanks. Good note. I'm just going to paste it in there and, see what
    it says, see what it does. So basically it's saying—okay. It's reflecting back
    to me. Here's what I think you want to do. “Add a button to the existing UI, create
    a function that sends the notes to GPT-4 and then display the received questions
    in your app.” And then it's creating a plan. So “add a generate questions button,
    create a function that takes the current notes, sends those notes to the OpenAI
    API, and handles the API response to extract the questions. Create a new state
    variable for storing the questions and update this state with the received questions,
    then show the questions in your UI.” That all sounds pretty reasonable to me and
    I'm going to do what you recommended and just copy-paste.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，谢谢。好的注意。我只是把它粘贴进去，看看它会说什么，看看它会做什么。所以基本上它在反映回给我。这是我认为你想做的事情。“向现有 UI 添加一个按钮，创建一个将笔记发送到
    GPT-4 的函数，然后在你的应用程序中显示接收到的问题。”然后它正在创建一个计划。“添加一个生成问题的按钮，创建一个获取当前笔记、将这些笔记发送到 OpenAI
    API 并处理 API 响应以提取问题的函数。为存储问题创建一个新的状态变量，并使用接收到的问题更新此状态，然后在您的 UI 中显示问题。”这一切听起来对我来说都很合理，我会按照你的建议去做，只是复制粘贴
- en: '**Geoffrey Litt (00:55:54)**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (00:55:54)**'
- en: Yeah. Quick warning. It did something interesting, which is that it elided some
    code. It said “existing code” in a few spots. So it actually hasn't given us a
    full new file that we can just copy paste. I would recommend just telling it “don't
    omit existing code, just write a full file that I can copy.”
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。快速警告。它做了一些有趣的事情，它省略了一些代码。它在几个地方说“现有代码”。所以它实际上没有给我们一个完整的新文件，我们可以直接复制粘贴。我建议告诉它“不要省略现有代码，只需写一个完整的文件，我可以复制。”
- en: '**Dan Shipper (00:56:14)**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (00:56:14)**'
- en: Let's see if that does that better. And we're also going to have to set our
    API key, which it's reminding us to do, and I have an API key I can use. And for
    people that don't know, the API key is just, you have to identify who you are
    when you make requests to GPT-4 so that OpenAI knows who to charge. And so you
    have a key.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这是否更好。我们还需要设置我们的 API 密钥，它提醒我们这样做，我有一个可以使用的 API 密钥。对于不了解的人，API 密钥只是，当您向 GPT-4
    发送请求时，您必须标识自己，以便 OpenAI 知道向谁收费。所以你有一个钥匙。
- en: '**Geoffrey Litt (00:56:35)**'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:56:35）**'
- en: This is another good example of a tricky thing where I can see a problem in
    this code already that it's going to try to use an API key assuming that it's
    running on a server because OpenAI, usually their docs assume you're running like
    a server that's querying them. Whereas in this case, we're running an app in a
    browser and we have to set up the API key a slightly different way. That's kind
    of a subtle thing in some ways that can trip you up if you're not aware of that.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个很好的例子，一个棘手的问题，我现在就能看到代码中的一个问题，它会尝试使用一个API密钥，假设它是在服务器上运行的，因为OpenAI的文档通常会假设你是在像查询他们的服务器上运行。而在这种情况下，我们是在浏览器中运行一个应用程序，我们必须以稍微不同的方式设置API密钥。这在某种程度上是一种微妙的东西，如果你不了解那个可能会让你误入歧途。
- en: '**Dan Shipper (00:57:07)**'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:57:07）**'
- en: And again, it's one of those things where we can try this, we'll see what error
    we get, and we'll throw it into ChatGPT and see if it can solve it. If not, we'll
    just solve it so that we can skip to the fun part. But you're right, there are
    these little micro moments where it's not quite right. And it's helpful to have
    some sense of what you're doing, so that—
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 再一次，我们可以尝试这样做，看看我们得到什么错误，然后将其投入ChatGPT中，看它能否解决。如果不能，我们就解决它，这样我们就可以跳到有趣的部分。但是你说得对，有这些微小的瞬间它还不太对。有些时候了解你在做什么是有帮助的，这样——
- en: '**Geoffrey Litt (00:57:30)**'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:57:30）**'
- en: Like you said, if you don't know what you're doing, you can just see what happens
    and, yeah, tell it to fix it so that it's often fine. It's just that if you know
    what you're doing, you can avoid some rabbit holes and makes faster progress.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你说的，如果你不知道自己在做什么，你只是看着发生了什么，并且，是的，叫它解决问题通常没什么大问题。只不过如果你知道你在做什么，你可以避免一些兔子洞，进步速度更快。
- en: '**Dan Shipper (00:57:49)**'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:57:49）**'
- en: Alright. So here we go. We're going to copy the code. We're going to hold our
    breath. We're not gonna read the code. And we got an error!
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 好了。我们就这么做。我们屏住呼吸。我们不看代码。然后我们得到了一个错误！
- en: '**Geoffrey Litt (00:57:55)**'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:57:55）**'
- en: Okay. so we don't have the OpenAI thing installed—
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 好。所以我们没有安装OpenAI这个东西——
- en: '**Dan Shipper (00:58:00)**'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:58:00）**'
- en: Right, so I know what to do. I, sorry, this is in JavaScript, so—
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 对，所以我知道该怎么做。对不起，这是JavaScript，所以——
- en: '**Geoffrey Litt (00:58:06)**'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:58:06）**'
- en: Yep. You don’t want that. Probably “npm install.” You could’ve asked Chat for
    that one to be honest.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。你不想这样。可能是“npm install”。老实说，你本来可以问Chat帮你解决这个问题。
- en: '**Dan Shipper (00:58:12)**'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:58:12）**'
- en: What did you say?
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 你说什么？
- en: '**Geoffrey Litt (00:58:13)**'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:58:13）**'
- en: We probably could’ve asked Chat how to fix it as well.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们本来应该问Chat如何修复它。
- en: '**Dan Shipper (00:58:16)**'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:58:16）**'
- en: We could have asked that. Yeah, that’s true. I'm getting impatient. I want to
    get to the magic. Well, it looks like we’ve got a broken UI here.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本来可以问问。是的，没错。我有点不耐烦。我想进行魔法操作了。看起来我们这里的UI出现了问题。
- en: '**Geoffrey Litt (00:58:34)**'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:58:34）**'
- en: “Process is not defined.”
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: “Process is not defined.”
- en: '**Dan Shipper (00:58:35)**'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:58:35）**'
- en: So here's what we're going to do. We're just going to copy this error and paste
    it in to ChatGPT and see what we get, unless you have some other—
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要做的是，我们会复制这个错误，并粘贴到ChatGPT中，看看我们能得到什么，除非你还有其他——
- en: '**Geoffrey Litt (00:58:47)**'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:58:47）**'
- en: That's perfect. Let's do that.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 那太完美了。我们就这么做。
- en: '**Dan Shipper (00:58:50)**'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:58:50）**'
- en: Okay, I got this error. “Typically occurs when environment variables are not
    accessible in the client-side JavaScript. This is common in projects with “Vite”
    as it doesn't automatically make environment variables available in the front
    end. It’s the OpenAI API key.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我得到了这个错误。“当环境变量在客户端的JavaScript中不可访问时通常会出现这种情况。这在使用“Vite”项目中很常见，因为它不会自动在前端使环境变量可用。这是OpenAI的API密钥。
- en: '**Geoffrey Litt (00:59:06)**'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（00:59:06）**'
- en: This is a good example of where it's telling us some stuff. We could do it this
    way. I think that it's kind of going to be a pain to set it up this way. One thing
    I'm thinking about is, so you could just hard code an OpenAI key right into the
    code here. Now, yeah, we need to be careful because, you're going to have to blur
    that out on the final video or something.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，它告诉我们一些信息。我们可以这样做。我认为以这种方式设置可能有点麻烦。我考虑的一件事是，你可以把OpenAI的密钥直接硬编码到这段代码中。但是，是的，我们需要小心，因为，在最终视频上你可能需要模糊处理这部分内容。
- en: But, often with this stuff… oh, yeah, maybe you can just—
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，通常情况下，这些东西…噢，是的，也许你只能——
- en: '**Dan Shipper (00:59:10)**'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·希珀（00:59:10）**'
- en: This will just work. We’ll probably cut some of this out. It’ll just figure
    this out.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: One thing I’m worried about is like this is all client-side there's no server.
    So I don't know if it'll work.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:00:01)**'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: It will, but there are security issues here. Now, if you were to share this
    REPL link it's possible that anyone who uses it would get to use your OpenAI key,
    which is a big problem. Oh, you need to pass in the API. Yeah, this doesn't work
    because we're not on a server.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:00:25)**'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Yeah, that’s why. We’ll just set it.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:00:28)**'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Alright. Just YOLO it.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:00:31)**'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember—Okay, let’s see…
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:00:33)**'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: The error message said it. So actually, we can do it this way. I think if we
    do what Chat said, we'll actually be fine. You just need to rename the Replit
    secret you set to be, “VITE_OpenAI.”
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: This is a good example of annoying programmery stuff that shouldn't be necessary
    to do.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Let's try that.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:01:05)**'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Alright. Running again. Holding our breath.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:01:05)**'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: This is how these things really go. It doesn't always work the first time. That's
    a part of the process.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: I think that it wants you to put theAPI key… around the API key in the error
    message. It says, yeah.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Again, we probably could have given that to Chat and had it help us with that,
    but—
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:01:40)**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: We're running out of time here.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:01:40)**'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: Okay, so yeah, it's fine. We need to set “dangerously allow browser” to “true,”
    because it doesn't like querying it from the browser, but that's okay. We're making
    a little app just for you. So it's going to be fine. Great. Again, it’s subtle,
    though, because understanding why this is dangerous and what's okay to do and
    what's not okay to do is a bit tricky.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:02:10)**'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: Alright, I’m going to press run and we're going to move over into our web view.
    And here it is, we've got a button. It's called “generate questions.” That's pretty
    cool.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:02:25)**'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Let's see if it works.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:02:27)**'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Yeah, let's see if it works. What I want to do is just move this. How do I move
    this down? There we go. Okay, cool. So what I want to do first, we have a bunch
    of notes for our interview. So I'm going to take this and, I'm just going to throw
    it in here. “Here are some notes from my guest.”
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:02:54)**'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: It might give you better questions if you paste in the entire doc because then
    it'll know more about your podcast and the vibe you're going for. We have our
    timer counting down. We can see it with the progress bar.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '**Dan Shipper (01:03:10)**'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: I know! Are we going to make it before the end? Okay. So I pasted a bunch of
    notes and I'm going to press “generate questions” and we’ll see what happens.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '**Geoffrey Litt (01:03:17)**'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what happens. So my guess, my intuition is it's not going to work
    the first try. But we'll see what happens. Have the dev tools open so you can
    see if it breaks or something.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看会发生什么。所以我的猜测，我的直觉是第一次尝试不会成功。但我们会看看发生了什么。打开开发工具，这样你就可以看到是否出现了故障或其他情况。
- en: '**Dan Shipper (01:03:29)**'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (01:03:29)**'
- en: It says connected, there's no errors.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 它说已连接，没有错误。
- en: '**Geoffrey Litt (01:03:31)**'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (01:03:31)**'
- en: This is tricky, right? Because we have to guess, maybe it's working and it's
    just taking a while. It's totally possible. It could be that it's going to break.
    Can you scroll down in the app and see if it's showing anything yet? In the, in
    the app, not the code. We just need to find out—
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点棘手，不是吗？因为我们得猜测，也许它正在工作，只是需要一点时间。这完全有可能。也可能是它即将崩溃。你能在应用程序中往下滚动看看是否已经显示出来了吗？在应用程序中，而不是在代码中。我们只需要找出来——
- en: '**Dan Shipper (01:03:47)**'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (01:03:47)**'
- en: There we go! We've got questions.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们成功了！我们有问题了。
- en: '**Geoffrey Litt (01:03:51)**'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (01:03:51)**'
- en: Wait, oh! It made a really weird UI for it. So we have questions.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，哦！它做了一个非常奇怪的 UI。所以我们有问题了。
- en: '**Dan Shipper (01:04:00)**'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (01:04:00)**'
- en: Okay, “Here are some prompts to discuss with Geoffrey Litt on your podcast episode.
    After welcoming Geoffrey to the podcast, ask him to give us a brief introduction
    about himself and what he does. Dive deep into ChatGPT use cases.” We love that.
    “Can you highlight some transformations or milestone moments in your professional
    work due to AI?” “How do you envision the future of AI and day to day tasks and
    professional workspaces?” That's a good question. I really like that one!
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 好，“这里有一些提示，可以在您的播客节目中与 Geoffrey Litt 进行讨论。在欢迎 Geoffrey 来到播客节目之后，请他简要介绍一下自己以及他的工作内容。深入探讨
    ChatGPT 的使用案例。” 我们很喜欢这个。“你能突出一些由于 AI 而产生的专业工作中的转变或里程碑时刻吗？” “你如何展望 AI 在日常任务和专业工作空间中的未来？”
    这是个好问题。我真的很喜欢这个！
- en: '**Geoffrey Litt (01:04:20)**'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '**Geoffrey Litt (01:04:20)**'
- en: I think we don't have time to go too much further on the app right now, but
    one thing that gets me—so one thing I love about this process is I'm responding
    to what it did, right? So obviously this UI is really janky. Like it needs some
    space between the two boxes and we can tell it to do that. But also I'm thinking,
    maybe it would be nice to see each of these questions in its own little box or
    something and maybe you could check them off as you go. And that's another idea
    I just had by looking at this. And I think that starts to point towards… Some
    of the advantages of doing it so you could have just done this in ChatGPT itself
    and not made an app. And I think for what we have so far, it would have been pretty
    similar because it's just giving you text. But the further we push into a custom
    UI for kind of maybe you want to reorder the questions and you could have it build
    a UI for dragging and dropping your questions into a different order. All that
    stuff is what comes to mind now. And that's stuff that, because we're in this
    custom UI, all of that is possible and those possibilities occur to me in a way
    that wouldn't if I was just in the chat box, right?
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得我们现在没有太多时间在应用程序上进一步深入，但有一件事情让我想到——所以我喜欢这个过程的一件事情是我在回应它的所作所为，对吧？所以显然这个 UI
    很粗糙。就像它需要在两个框之间留些空间，我们可以告诉它这样做。但我也在想，也许看到每个问题都在自己的小框里会很好，或者你可以在进行时勾选它们。这是我看到这个之后又有的另一个想法。而且我觉得这开始指向……进行这样做的一些优势，所以你本来可以直接在
    ChatGPT 中完成这个，而不是制作一个应用程序。而且我认为到目前为止，结果可能会相当相似，因为它只是给你一些文字。但是随着我们深入到一个自定义 UI 中，也许你想要重新排序问题，你可以让它构建一个
    UI 来拖放你的问题到不同的顺序。现在我想到的所有这些都是可能的，这些可能性出现在我脑海中，如果我只是在聊天框中的话，就不会有这样的可能性，对吧？
- en: '**Dan Shipper (01:05:22)**'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dan Shipper (01:05:22)**'
- en: I think you're totally right. ChatGPT already has code interpreter where it
    can write and run code for you. And I really think there's a world where instead
    of pasting into Replit, especially for these mini one-off apps, you're just using
    UI that is constructed on the fly in ChatGPT, and then modifying it, and then
    that becomes a custom GPT you can use for a while, and you can already see this.
    In the Google Gemini demo, for their newest language model, it does that inside
    of Bard and I really think that’s where we're going for a lot of this stuff.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为你说得没错。ChatGPT已经有了一个代码解释器，它可以为你编写和运行代码。而我真的觉得将来我们将会看到这样的世界——特别是对于这些一次性小应用程序，你不需要再粘贴到Replit中，而是在ChatGPT中动态构建UI，然后修改它，然后它就成了你可以使用一段时间的自定义GPT，你已经能在谷歌的Gemini演示中看到它。他们最新的语言模型成功地在Bard中做到了这一点，我真的觉得我们未来的方向正是如此。
- en: '**Geoffrey Litt (01:06:01)**'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（01:06:01）**'
- en: I totally agree. And in fact, I think often people aren't going to even need
    to ask, “Make me a UI that does X.” Really, the bot should just decide, when I
    ask for X, it should just pick the best UI for that task, which might be text
    or it might be a custom whole thing, right?
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我完全同意。实际上，我认为人们通常甚至不需要询问，“给我做一个做X功能的UI。” 真的，机器人应该主动决定，当我要X时，它应该选择最适合这个任务的UI，可能是文本，也可能是一个自定义的整体，对吗？
- en: '**Dan Shipper (01:06:20)**'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普尔（01:06:20）**'
- en: Totally. So this was pretty awesome. We came up with an idea. We built the first
    version, then you sent it to me and I made some modifications, which now we can
    send back to you and you can keep going with it. You have a bunch of ideas for
    me to take it like this is sort of the future of building stuff.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 完全没错。这太棒了。我们想出了一个主意，我们构建了第一个版本，然后你把它发给我，我做了一些修改，现在我们可以把它发送回给你，你可以继续完善它。你有一大堆的想法给我去实现，这基本上就是搭建东西的未来。
- en: And we did it in like an hour. And I think that's so incredible.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 并且我们只用了一个小时。我觉得这太不可思议了。
- en: '**Geoffrey Litt (01:06:50)**'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（01:06:50）**'
- en: I know it's so fun. And we were able to just kind of have fun and talk while
    we were doing it. We never got totally stuck. And I think that's the feeling that
    I want when I'm building stuff and I think everybody wants when they're building
    stuff of effortless flow.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，这太有趣了。我们在做的时候能玩得开心，边聊边做的时候我们也没有完全陷入困境。我觉得这是我在构建东西时想要的感觉，而我想每个人在构建东西时都想要的就是毫不费力地流畅进行。
- en: And I'm really excited. I think LLM-based tools are sort of on a path to enabling
    that for way more people in way more situations.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很兴奋。我认为基于LLM的工具正在为更多的人在更多不同的情况下实现这一点。
- en: '**Dan Shipper (01:07:09)**'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普尔（01:07:09）**'
- en: Yeah. A hundred percent So as people are coming out of this episode, they're
    inspired. They want to go do stuff. They want to learn more about your research.
    They want to think about the future of where this is going, where do they find
    you and what should they read?
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。百分之百。所以当人们看完这集节目，他们感到振奋。他们想要去做一些事情。他们想要更多地了解你的研究。他们想要思考这个领域的未来，他们在哪里能找到你，该读些什么呢？
- en: '**Geoffrey Litt (01:07:24)**'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（01:07:24）**'
- en: Yeah. I have a personal website geoffreylitt.com where I post various research.
    I wrote an essay earlier this year called “Malleable software in the age of LLMs,”
    where I kind of lay out a bit more of the thinking behind this worldview. And,
    those are some places to check out more thoughts.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。我有个个人网站geoffreylitt.com，在那里我发布了一些研究。今年早些时候我写了一篇名为“在LLM时代的可塑软件”的文章，我在其中描述了这种世界观的一些思考。这是一些可以看看更多想法的地方。
- en: I'll be publishing more research in the coming year or two on how do we take
    this workflow we just did and actually make it really awesome and integrate better
    into sort of a whole coherent work environment with less copy-pasting and sort
    of less dealing with infrastructure. So look forward to that too.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在未来一两年内发布更多关于如何将我们刚刚做的工作流程变得真正出色，并更好地整合进一个整体的工作环境中，少一些复制粘贴和基础设施的处理。所以也期待着这一点。
- en: '**Dan Shipper (01:08:00)**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**丹·席普尔（01:08:00）**'
- en: Amazing. Well, I'm super excited when that comes out. I would love to have you
    back. This was incredible. I’m walking on air right now. Like there's so much
    good stuff happening here and I really appreciate you taking the time to walk
    us through this.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。我很期待它的发布。我很想再邀请你回来。这真是太棒了。我现在心情特别好。这里发生了很多好事，我真的很感激你花时间来向我们解释这一切。
- en: '**Geoffrey Litt (01:08:18)**'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰弗里·利特（01:08:18）**'
- en: Thanks so much. This was really fun.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 非常感谢。这真的很有趣。
