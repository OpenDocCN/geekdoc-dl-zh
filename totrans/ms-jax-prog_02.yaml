- en: '`Chapter 2: Getting Started with Jax`'
  id: totrans-0
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-1
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Welcome to the launchpad of your Jax adventure! In this chapter, we're gearing
    up for the ride into Jax programming. Buckle up as we set the stage, install the
    necessary tools, and take our first strides into the world of Jax with hands-on
    coding.
  id: totrans-2
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`2.1 Setting up the Jax Environment`'
  id: totrans-3
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Before we embark on the Jax journey, let's ensure our toolkit is ready for action.
    Setting up the Jax environment is a crucial first step, and in this section, we'll
    guide you through the process. From choosing your platform to installing essential
    libraries, let's make sure you're well-equipped to unleash the power of Jax.
  id: totrans-4
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Setting the Stage: Choosing Your Platform'
  id: totrans-5
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax is flexible, catering to various platforms such as macOS, Linux, and Windows.
    Ensure you're on the right track by checking your operating system's compatibility
    and hardware requirements.
  id: totrans-6
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 1: Install Python'
  id: totrans-7
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax relies on Python, so if you don't have it installed, now's the time. Ensure
    you have Python 3.7 or later. You can download the latest version from the official
    Python website.
  id: totrans-8
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 2: Install Jax'
  id: totrans-9
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: With Python in place, use the pip package installer to get Jax.
  id: totrans-10
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Open your terminal or command prompt and type: `pip install jax`'
  id: totrans-11
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 3: Confirm Installation'
  id: totrans-12
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Make sure Jax is properly installed by opening a Python interpreter and typing:
    `import jax; print(jax.__version__)` This should display the installed Jax version.'
  id: totrans-13
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Equipping Your Toolbox: Installing Essential Libraries'
  id: totrans-14
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax teams up with other libraries to enhance functionality. Let's install the
    essential ones.
  id: totrans-15
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 1: Install NumPy'
  id: totrans-16
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'NumPy is Jax''s right-hand companion for numerical operations. Install it using:
    `pip install numpy`'
  id: totrans-17
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 2: Optional Libraries'
  id: totrans-18
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Consider additional libraries for extended capabilities. For example, Matplotlib
    for plotting and scikit-learn for machine learning. Install them as needed.
  id: totrans-19
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: With your Jax environment set up and essential libraries in place, you're armed
    and ready. The journey ahead involves crafting code, exploring data structures,
    and tapping into the power of Jax.
  id: totrans-20
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`2.2 Writing Basic Jax Programs Using NumPy-Style Syntax`'
  id: totrans-21
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: Now that our Jax environment is up and running, it's time to get hands-on with
    some basic Jax programs. In this section, we'll explore the NumPy-style syntax
    that makes Jax not only powerful but also pleasantly familiar. Let's start writing
    some code and unleash the simplicity of Jax.
  id: totrans-22
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 1: Importing Jax'
  id: totrans-23
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: StartÂ by importing the Jax library. This sets the stage for all your numerical
    computations in the Jax style.
  id: totrans-24
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`import jax`'
  id: totrans-25
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 2: Creating Arrays'
  id: totrans-26
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax adopts the NumPy-style syntax for creating arrays. Let's dive in and create
    a simple array.
  id: totrans-27
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Creating a Jax array`'
  id: totrans-28
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`x = jax.numpy.array([1, 2, 3])`'
  id: totrans-29
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 3: Performing Operations'
  id: totrans-30
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: The beauty of Jax lies in its ability to perform operations on arrays with the
    ease of NumPy.
  id: totrans-31
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Let's apply a mathematical function to our array.
  id: totrans-32
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Applying a sine function to the array
  id: totrans-33
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`y = jax.numpy.sin(x) + 2`'
  id: totrans-34
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Step 4: Printing Results'
  id: totrans-35
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Now, let's print the results and witness the outcome of our Jax computations.
  id: totrans-36
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Displaying the results
  id: totrans-37
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`print(y)`'
  id: totrans-38
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Exploring Data Structures and Mathematical Operations
  id: totrans-39
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax supports various data structures and mathematical operations, making it
    a versatile tool for numerical computation.
  id: totrans-40
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Data Structures in Jax
  id: totrans-41
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating a Jax vector
  id: totrans-42
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`vector = jax.numpy.array([4, 5, 6])`'
  id: totrans-43
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating a Jax matrix
  id: totrans-44
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`matrix = jax.numpy.array([[1, 2], [3, 4]])`'
  id: totrans-45
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Mathematical Operations in Jax
  id: totrans-46
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Performing arithmetic operations
  id: totrans-47
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`result_addition = x + vector`'
  id: totrans-48
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`result_multiplication = matrix * 2`'
  id: totrans-49
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Congratulations! You've just crafted your first Jax programs using NumPy-style
    syntax. The simplicity and familiarity of NumPy combined with the power of Jax
    are at your fingertips. As you continue your Jax journey, these basic building
    blocks will form the foundation for more complex and exciting numerical computations.
  id: totrans-50
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 2.3 Working with Arrays, Data Structures, and Mathematical Operations in Jax
  id: totrans-51
  prefs:
  - PREF_H2
  stylish: true
  type: TYPE_NORMAL
- en: 'Arrays in Jax: Embracing Numerical Simplicity'
  id: totrans-52
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: In the heart of Jax lies its exceptional handling of arrays. Leveraging the
    NumPy-style syntax, creating and manipulating arrays becomes a breeze.
  id: totrans-53
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating Arrays with Jax
  id: totrans-54
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating a Jax array
  id: totrans-55
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: x = `jax.numpy.array([1, 2, 3])`
  id: totrans-56
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Performing Operations on Arrays:'
  id: totrans-57
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax unleashes its power when it comes to array operations. Whether it's simple
    arithmetic or complex mathematical functions, Jax handles it seamlessly.
  id: totrans-58
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Applying operations to arrays
  id: totrans-59
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`y = jax.numpy.sin(x) + 2`'
  id: totrans-60
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Data Structures in Jax: Versatility Unleashed'
  id: totrans-61
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax isn't limited to basic arrays; it extends its capabilities to various data
    structures, adding a layer of flexibility to your numerical computations.
  id: totrans-62
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating Vectors and Matrices in Jax
  id: totrans-63
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating a Jax vector
  id: totrans-64
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`vector = jax.numpy.array([4, 5, 6])`'
  id: totrans-65
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Creating a Jax matrix
  id: totrans-66
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`matrix = jax.numpy.array([[1, 2], [3, 4]])`'
  id: totrans-67
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Mathematical Marvels with Jax: Operations Beyond the Basics'
  id: totrans-68
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Jax's mathematical prowess shines through as it handles a spectrum of operations,
    making it a robust tool for diverse numerical tasks.
  id: totrans-69
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Arithmetic Operations with Jax
  id: totrans-70
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Performing arithmetic operations on arrays
  id: totrans-71
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`result_addition = x + vector`'
  id: totrans-72
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`result_multiplication = matrix * 2`'
  id: totrans-73
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Complex Mathematical Functions in Jax
  id: totrans-74
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Applying more complex functions
  id: totrans-75
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`result_exp = jax.numpy.exp(x)`'
  id: totrans-76
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`result_sqrt = jax.numpy.sqrt(matrix)`'
  id: totrans-77
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: As you've witnessed, Jax transforms numerical computations into a playground
    of simplicity and efficiency. Working with arrays, exploring data structures,
    and engaging in mathematical operations become intuitive and powerful with Jax.
    This marks another step in your journey towards mastering the art of Jax programming.
  id: totrans-78
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Coding Challenge: Array Manipulation with Jax'
  id: totrans-79
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 'Challenge: Create a Jax program that takes an array `A` and performs the following
    operations:'
  id: totrans-80
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 1\. Compute the square of each element in `A`.
  id: totrans-81
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 2\. Calculate the cumulative sum of the squared elements.
  id: totrans-82
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: 3\. Find the mean of the resulting array.
  id: totrans-83
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: Solution
  id: totrans-84
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`import jax`'
  id: totrans-85
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`def array_manipulation_challenge(A):`'
  id: totrans-86
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`# Step 1: Compute the square of each element in A`'
  id: totrans-87
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`squared_elements = jax.numpy.square(A)`'
  id: totrans-88
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`# Step 2: Calculate the cumulative sum of the squared elements`'
  id: totrans-89
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`cumulative_sum = jax.numpy.cumsum(squared_elements)`'
  id: totrans-90
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`# Step 3: Find the mean of the resulting array`'
  id: totrans-91
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`mean_result = jax.numpy.mean(cumulative_sum)`'
  id: totrans-92
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`return mean_result`'
  id: totrans-93
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`Example usage:`'
  id: totrans-94
  prefs:
  - PREF_H1
  stylish: true
  type: TYPE_NORMAL
- en: '`input_array = jax.numpy.array([1, 2, 3, 4, 5])`'
  id: totrans-95
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`result = array_manipulation_challenge(input_array)`'
  id: totrans-96
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`print("Result:", result)`'
  id: totrans-97
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: '`This challenge encourages you to manipulate an array using Jax''s capabilities.
    Feel free to experiment with different input arrays and explore how Jax simplifies
    complex operations on numerical data.`'
  id: totrans-98
  prefs: []
  stylish: true
  type: TYPE_NORMAL
- en: And there you have itâthe kickoff to your Jax journey! You've laid the groundwork,
    from setting up your environment to flexing your coding muscles with basic Jax
    programs. As we wrap up, remember, this is just the beginning. The coding playground
    is yours to explore, and the versatility of Jax is your toolkit.
  id: totrans-99
  prefs: []
  stylish: true
  type: TYPE_NORMAL
